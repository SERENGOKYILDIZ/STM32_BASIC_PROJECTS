
034_TIMER_EXT_TRIG_MODE1_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e04  08001e04  00011e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001e14  08001e14  00011e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000085ba  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000128c  00000000  00000000  000285f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000940  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000898  00000000  00000000  0002a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000048de  00000000  00000000  0002aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003012  00000000  00000000  0002f33e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00032350  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002680  00000000  00000000  000323cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001dec 	.word	0x08001dec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001dec 	.word	0x08001dec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004dc:	f000 f9d0 	bl	8000880 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e0:	f000 f812 	bl	8000508 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_GPIO_Init>
	MX_TIM2_Init();
 80004e8:	f000 f878 	bl	80005dc <MX_TIM2_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_TIM_Base_Start(&htim2);             	//->Start TIM2
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <main+0x28>)
 80004ee:	f001 f957 	bl	80017a0 <HAL_TIM_Base_Start>
	while (1)
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		count = __HAL_TIM_GET_COUNTER(&htim2);  	//->Add +1, 0 to 50. Because "htim2.Init.Period = 50"
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <main+0x28>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b02      	ldr	r3, [pc, #8]	; (8000504 <main+0x2c>)
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	e7f8      	b.n	80004f2 <main+0x1a>
 8000500:	2000002c 	.word	0x2000002c
 8000504:	20000028 	.word	0x20000028

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fc60 	bl	8001ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4a28      	ldr	r2, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fc81 	bl	8000e94 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f8c4 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fee2 	bl	8001384 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f8ad 	bl	8000724 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_TIM2_Init+0xa0>)
 80005fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000600:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_TIM2_Init+0xa0>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_TIM2_Init+0xa0>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_TIM2_Init+0xa0>)
 8000610:	2232      	movs	r2, #50	; 0x32
 8000612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_TIM2_Init+0xa0>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_TIM2_Init+0xa0>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <MX_TIM2_Init+0xa0>)
 8000622:	f001 f86d 	bl	8001700 <HAL_TIM_Base_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800062c:	f000 f87a 	bl	8000724 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000630:	2307      	movs	r3, #7
 8000632:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000634:	2350      	movs	r3, #80	; 0x50
 8000636:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 800063c:	230f      	movs	r3, #15
 800063e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_TIM2_Init+0xa0>)
 8000648:	f001 f912 	bl	8001870 <HAL_TIM_SlaveConfigSynchro>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000652:	f000 f867 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_TIM2_Init+0xa0>)
 8000664:	f001 faf0 	bl	8001c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800066e:	f000 f859 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000002c 	.word	0x2000002c

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4a20      	ldr	r2, [pc, #128]	; (800071c <MX_GPIO_Init+0x9c>)
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_GPIO_Init+0x9c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_GPIO_Init+0x9c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4a19      	ldr	r2, [pc, #100]	; (800071c <MX_GPIO_Init+0x9c>)
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_GPIO_Init+0x9c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_GPIO_Init+0x9c>)
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_GPIO_Init+0x9c>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0xa0>)
 80006f2:	f000 fbb5 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0xa0>)
 8000710:	f000 fa0c 	bl	8000b2c <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072a:	e7fe      	b.n	800072a <Error_Handler+0x6>

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <HAL_MspInit+0x4c>)
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x4c>)
 800073a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <HAL_MspInit+0x4c>)
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_MspInit+0x4c>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076a:	2007      	movs	r0, #7
 800076c:	f000 f9aa 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800

0800077c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800079c:	d12b      	bne.n	80007f6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_TIM_Base_MspInit+0x84>)
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_TIM_Base_MspInit+0x84>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_TIM_Base_MspInit+0x84>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_TIM_Base_MspInit+0x84>)
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_TIM_Base_MspInit+0x84>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_TIM_Base_MspInit+0x84>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007e6:	2301      	movs	r3, #1
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <HAL_TIM_Base_MspInit+0x88>)
 80007f2:	f000 f99b 	bl	8000b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f866 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <SystemInit+0x20>)
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <SystemInit+0x20>)
 8000864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800086c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_Init+0x40>)
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_Init+0x40>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <HAL_Init+0x40>)
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_Init+0x40>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_Init+0x40>)
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_Init+0x40>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f90b 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff ff3a 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023c00 	.word	0x40023c00

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f915 	bl	8000b12 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f8eb 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x20>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x24>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_IncTick+0x24>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008
 8000948:	20000074 	.word	0x20000074

0800094c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_GetTick+0x14>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000074 	.word	0x20000074

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	490d      	ldr	r1, [pc, #52]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	4909      	ldr	r1, [pc, #36]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	2201      	movs	r2, #1
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a62:	2101      	movs	r1, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	1e59      	subs	r1, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff90 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff49 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff5e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff90 	bl	8000a1c <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5f 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb0 	bl	8000a80 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	e16b      	b.n	8000e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f040 815a 	bne.w	8000e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d005      	beq.n	8000b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d130      	bne.n	8000be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	f003 0201 	and.w	r2, r3, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d017      	beq.n	8000c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d123      	bne.n	8000c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	08da      	lsrs	r2, r3, #3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	08da      	lsrs	r2, r3, #3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3208      	adds	r2, #8
 8000c6a:	69b9      	ldr	r1, [r7, #24]
 8000c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0203 	and.w	r2, r3, #3
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 80b4 	beq.w	8000e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4a5f      	ldr	r2, [pc, #380]	; (8000e34 <HAL_GPIO_Init+0x308>)
 8000cb8:	4b5e      	ldr	r3, [pc, #376]	; (8000e34 <HAL_GPIO_Init+0x308>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <HAL_GPIO_Init+0x308>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cce:	4a5a      	ldr	r2, [pc, #360]	; (8000e38 <HAL_GPIO_Init+0x30c>)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a51      	ldr	r2, [pc, #324]	; (8000e3c <HAL_GPIO_Init+0x310>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d02b      	beq.n	8000d52 <HAL_GPIO_Init+0x226>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a50      	ldr	r2, [pc, #320]	; (8000e40 <HAL_GPIO_Init+0x314>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d025      	beq.n	8000d4e <HAL_GPIO_Init+0x222>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <HAL_GPIO_Init+0x318>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d01f      	beq.n	8000d4a <HAL_GPIO_Init+0x21e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <HAL_GPIO_Init+0x31c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d019      	beq.n	8000d46 <HAL_GPIO_Init+0x21a>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <HAL_GPIO_Init+0x320>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d013      	beq.n	8000d42 <HAL_GPIO_Init+0x216>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <HAL_GPIO_Init+0x324>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00d      	beq.n	8000d3e <HAL_GPIO_Init+0x212>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4b      	ldr	r2, [pc, #300]	; (8000e54 <HAL_GPIO_Init+0x328>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d007      	beq.n	8000d3a <HAL_GPIO_Init+0x20e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <HAL_GPIO_Init+0x32c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_GPIO_Init+0x20a>
 8000d32:	2307      	movs	r3, #7
 8000d34:	e00e      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d36:	2308      	movs	r3, #8
 8000d38:	e00c      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	e00a      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	e008      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d46:	2303      	movs	r3, #3
 8000d48:	e004      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <HAL_GPIO_Init+0x228>
 8000d52:	2300      	movs	r3, #0
 8000d54:	69fa      	ldr	r2, [r7, #28]
 8000d56:	f002 0203 	and.w	r2, r2, #3
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d64:	4934      	ldr	r1, [pc, #208]	; (8000e38 <HAL_GPIO_Init+0x30c>)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d72:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d96:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc0:	4a26      	ldr	r2, [pc, #152]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	f67f ae90 	bls.w	8000b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3724      	adds	r7, #36	; 0x24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020400 	.word	0x40020400
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40021400 	.word	0x40021400
 8000e54:	40021800 	.word	0x40021800
 8000e58:	40021c00 	.word	0x40021c00
 8000e5c:	40013c00 	.word	0x40013c00

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e70:	787b      	ldrb	r3, [r7, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e7c:	e003      	b.n	8000e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	041a      	lsls	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	619a      	str	r2, [r3, #24]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e264      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d075      	beq.n	8000f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eb2:	4ba3      	ldr	r3, [pc, #652]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ebe:	4ba0      	ldr	r3, [pc, #640]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d112      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eca:	4b9d      	ldr	r3, [pc, #628]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ed6:	d10b      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	4b99      	ldr	r3, [pc, #612]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d05b      	beq.n	8000f9c <HAL_RCC_OscConfig+0x108>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d157      	bne.n	8000f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e23f      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef8:	d106      	bne.n	8000f08 <HAL_RCC_OscConfig+0x74>
 8000efa:	4a91      	ldr	r2, [pc, #580]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	4b90      	ldr	r3, [pc, #576]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xb0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x98>
 8000f12:	4a8b      	ldr	r2, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	4b8a      	ldr	r3, [pc, #552]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4a88      	ldr	r2, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xb0>
 8000f2c:	4a84      	ldr	r2, [pc, #528]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f2e:	4b84      	ldr	r3, [pc, #528]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4a81      	ldr	r2, [pc, #516]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcfe 	bl	800094c <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fcfa 	bl	800094c <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e204      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b76      	ldr	r3, [pc, #472]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xc0>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcea 	bl	800094c <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fce6 	bl	800094c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1f0      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0xe8>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d063      	beq.n	8001072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000faa:	4b65      	ldr	r3, [pc, #404]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb6:	4b62      	ldr	r3, [pc, #392]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x152>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1c4      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4956      	ldr	r1, [pc, #344]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	4b55      	ldr	r3, [pc, #340]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e03a      	b.n	8001072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <HAL_RCC_OscConfig+0x2b0>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100a:	f7ff fc9f 	bl	800094c <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fc9b 	bl	800094c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1a5      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	4b46      	ldr	r3, [pc, #280]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4943      	ldr	r1, [pc, #268]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <HAL_RCC_OscConfig+0x2b0>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104c:	f7ff fc7e 	bl	800094c <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fc7a 	bl	800094c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e184      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d030      	beq.n	80010e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d016      	beq.n	80010b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_RCC_OscConfig+0x2b4>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108c:	f7ff fc5e 	bl	800094c <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc5a 	bl	800094c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e164      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x200>
 80010b2:	e015      	b.n	80010e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_RCC_OscConfig+0x2b4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fc47 	bl	800094c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c2:	f7ff fc43 	bl	800094c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e14d      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80a0 	beq.w	800122e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10f      	bne.n	800111e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800111a:	2301      	movs	r3, #1
 800111c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_OscConfig+0x2b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d121      	bne.n	800116e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_RCC_OscConfig+0x2b8>)
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_RCC_OscConfig+0x2b8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001136:	f7ff fc09 	bl	800094c <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	e011      	b.n	8001162 <HAL_RCC_OscConfig+0x2ce>
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	42470000 	.word	0x42470000
 8001148:	42470e80 	.word	0x42470e80
 800114c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001150:	f7ff fbfc 	bl	800094c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e106      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	4b85      	ldr	r3, [pc, #532]	; (8001378 <HAL_RCC_OscConfig+0x4e4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d106      	bne.n	8001184 <HAL_RCC_OscConfig+0x2f0>
 8001176:	4a81      	ldr	r2, [pc, #516]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 8001178:	4b80      	ldr	r3, [pc, #512]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6713      	str	r3, [r2, #112]	; 0x70
 8001182:	e01c      	b.n	80011be <HAL_RCC_OscConfig+0x32a>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d10c      	bne.n	80011a6 <HAL_RCC_OscConfig+0x312>
 800118c:	4a7b      	ldr	r2, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800118e:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 8001190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6713      	str	r3, [r2, #112]	; 0x70
 8001198:	4a78      	ldr	r2, [pc, #480]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800119a:	4b78      	ldr	r3, [pc, #480]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6713      	str	r3, [r2, #112]	; 0x70
 80011a4:	e00b      	b.n	80011be <HAL_RCC_OscConfig+0x32a>
 80011a6:	4a75      	ldr	r2, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 80011a8:	4b74      	ldr	r3, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 80011aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6713      	str	r3, [r2, #112]	; 0x70
 80011b2:	4a72      	ldr	r2, [pc, #456]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 80011b4:	4b71      	ldr	r3, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 80011b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d015      	beq.n	80011f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c6:	f7ff fbc1 	bl	800094c <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fbbd 	bl	800094c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0c5      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e4:	4b65      	ldr	r3, [pc, #404]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ee      	beq.n	80011ce <HAL_RCC_OscConfig+0x33a>
 80011f0:	e014      	b.n	800121c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fbab 	bl	800094c <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fba7 	bl	800094c <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0af      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001210:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ee      	bne.n	80011fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d105      	bne.n	800122e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001222:	4a56      	ldr	r2, [pc, #344]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 8001224:	4b55      	ldr	r3, [pc, #340]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 809b 	beq.w	800136e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001238:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d05c      	beq.n	80012fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d141      	bne.n	80012d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <HAL_RCC_OscConfig+0x4ec>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fb7b 	bl	800094c <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff fb77 	bl	800094c <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e081      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001278:	4940      	ldr	r1, [pc, #256]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69da      	ldr	r2, [r3, #28]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	019b      	lsls	r3, r3, #6
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	3b01      	subs	r3, #1
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	061b      	lsls	r3, r3, #24
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_RCC_OscConfig+0x4ec>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb50 	bl	800094c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fb4c 	bl	800094c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e056      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	4b2e      	ldr	r3, [pc, #184]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x41c>
 80012ce:	e04e      	b.n	800136e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_RCC_OscConfig+0x4ec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb39 	bl	800094c <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff fb35 	bl	800094c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e03f      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f0      	bne.n	80012de <HAL_RCC_OscConfig+0x44a>
 80012fc:	e037      	b.n	800136e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e032      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_RCC_OscConfig+0x4e8>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d028      	beq.n	800136a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001322:	429a      	cmp	r2, r3
 8001324:	d121      	bne.n	800136a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001330:	429a      	cmp	r2, r3
 8001332:	d11a      	bne.n	800136a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800133a:	4013      	ands	r3, r2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001340:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001342:	4293      	cmp	r3, r2
 8001344:	d111      	bne.n	800136a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	3b01      	subs	r3, #1
 8001354:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001356:	429a      	cmp	r2, r3
 8001358:	d107      	bne.n	800136a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40007000 	.word	0x40007000
 800137c:	40023800 	.word	0x40023800
 8001380:	42470060 	.word	0x42470060

08001384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0cc      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0207 	and.w	r2, r3, #7
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d20c      	bcs.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0207 	and.w	r2, r3, #7
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0b8      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d8:	4a59      	ldr	r2, [pc, #356]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f0:	4a53      	ldr	r2, [pc, #332]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4950      	ldr	r1, [pc, #320]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4313      	orrs	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d044      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d119      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e07f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d003      	beq.n	8001442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143e:	2b03      	cmp	r3, #3
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e067      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001462:	4937      	ldr	r1, [pc, #220]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 0203 	bic.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff fa6a 	bl	800094c <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	e00a      	b.n	8001492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147c:	f7ff fa66 	bl	800094c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	; 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e04f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 020c 	and.w	r2, r3, #12
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1eb      	bne.n	800147c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b25      	ldr	r3, [pc, #148]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0207 	and.w	r2, r3, #7
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d90c      	bls.n	80014cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0207 	and.w	r2, r3, #7
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e032      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4919      	ldr	r1, [pc, #100]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f6:	4912      	ldr	r1, [pc, #72]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150a:	f000 f821 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 800150e:	4601      	mov	r1, r0
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	fa21 f303 	lsr.w	r3, r1, r3
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f9ca 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00
 8001540:	40023800 	.word	0x40023800
 8001544:	08001e04 	.word	0x08001e04
 8001548:	20000000 	.word	0x20000000
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001554:	b08f      	sub	sp, #60	; 0x3c
 8001556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b04      	cmp	r3, #4
 8001572:	d007      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x34>
 8001574:	2b08      	cmp	r3, #8
 8001576:	d008      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x3a>
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 80b2 	bne.w	80016e2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001582:	e0b1      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001588:	e0ae      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158a:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d04e      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b54      	ldr	r3, [pc, #336]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	f04f 0400 	mov.w	r4, #0
 80015aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	ea01 0103 	and.w	r1, r1, r3
 80015b6:	ea02 0204 	and.w	r2, r2, r4
 80015ba:	460b      	mov	r3, r1
 80015bc:	4614      	mov	r4, r2
 80015be:	0160      	lsls	r0, r4, #5
 80015c0:	6278      	str	r0, [r7, #36]	; 0x24
 80015c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80015c8:	6278      	str	r0, [r7, #36]	; 0x24
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80015d2:	1a5b      	subs	r3, r3, r1
 80015d4:	eb64 0402 	sbc.w	r4, r4, r2
 80015d8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80015dc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80015e0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80015e4:	ebb8 0803 	subs.w	r8, r8, r3
 80015e8:	eb69 0904 	sbc.w	r9, r9, r4
 80015ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001604:	eb18 0801 	adds.w	r8, r8, r1
 8001608:	eb49 0902 	adc.w	r9, r9, r2
 800160c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001624:	4640      	mov	r0, r8
 8001626:	4649      	mov	r1, r9
 8001628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162a:	f04f 0400 	mov.w	r4, #0
 800162e:	461a      	mov	r2, r3
 8001630:	4623      	mov	r3, r4
 8001632:	f7fe fdc9 	bl	80001c8 <__aeabi_uldivmod>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
 800163c:	e043      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	ea01 0103 	and.w	r1, r1, r3
 8001654:	ea02 0204 	and.w	r2, r2, r4
 8001658:	460b      	mov	r3, r1
 800165a:	4614      	mov	r4, r2
 800165c:	0160      	lsls	r0, r4, #5
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001670:	1a5b      	subs	r3, r3, r1
 8001672:	eb64 0402 	sbc.w	r4, r4, r2
 8001676:	01a6      	lsls	r6, r4, #6
 8001678:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800167c:	019d      	lsls	r5, r3, #6
 800167e:	1aed      	subs	r5, r5, r3
 8001680:	eb66 0604 	sbc.w	r6, r6, r4
 8001684:	00f3      	lsls	r3, r6, #3
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	00eb      	lsls	r3, r5, #3
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001698:	186d      	adds	r5, r5, r1
 800169a:	eb46 0602 	adc.w	r6, r6, r2
 800169e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80016a2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80016a6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80016aa:	4655      	mov	r5, sl
 80016ac:	465e      	mov	r6, fp
 80016ae:	4628      	mov	r0, r5
 80016b0:	4631      	mov	r1, r6
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	f04f 0400 	mov.w	r4, #0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7fe fd84 	bl	80001c8 <__aeabi_uldivmod>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	3301      	adds	r3, #1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80016d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016e0:	e002      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	373c      	adds	r7, #60	; 0x3c
 80016ee:	46bd      	mov	sp, r7
 80016f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200

08001700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e041      	b.n	8001796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff f828 	bl	800077c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3304      	adds	r3, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f000 f8d8 	bl	80018f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d001      	beq.n	80017b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e046      	b.n	8001846 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a23      	ldr	r2, [pc, #140]	; (8001854 <HAL_TIM_Base_Start+0xb4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d022      	beq.n	8001810 <HAL_TIM_Base_Start+0x70>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d2:	d01d      	beq.n	8001810 <HAL_TIM_Base_Start+0x70>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_TIM_Base_Start+0xb8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d018      	beq.n	8001810 <HAL_TIM_Base_Start+0x70>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_TIM_Base_Start+0xbc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d013      	beq.n	8001810 <HAL_TIM_Base_Start+0x70>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <HAL_TIM_Base_Start+0xc0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00e      	beq.n	8001810 <HAL_TIM_Base_Start+0x70>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <HAL_TIM_Base_Start+0xc4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d009      	beq.n	8001810 <HAL_TIM_Base_Start+0x70>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <HAL_TIM_Base_Start+0xc8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_TIM_Base_Start+0x70>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_TIM_Base_Start+0xcc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d111      	bne.n	8001834 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b06      	cmp	r3, #6
 8001820:	d010      	beq.n	8001844 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	f042 0201 	orr.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001832:	e007      	b.n	8001844 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40010000 	.word	0x40010000
 8001858:	40000400 	.word	0x40000400
 800185c:	40000800 	.word	0x40000800
 8001860:	40000c00 	.word	0x40000c00
 8001864:	40010400 	.word	0x40010400
 8001868:	40014000 	.word	0x40014000
 800186c:	40001800 	.word	0x40001800

08001870 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001884:	2302      	movs	r3, #2
 8001886:	e031      	b.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8ca 	bl	8001a34 <TIM_SlaveTimer_SetConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e018      	b.n	80018ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	68d2      	ldr	r2, [r2, #12]
 80018c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	68d2      	ldr	r2, [r2, #12]
 80018d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a40      	ldr	r2, [pc, #256]	; (8001a08 <TIM_Base_SetConfig+0x114>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d013      	beq.n	8001934 <TIM_Base_SetConfig+0x40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001912:	d00f      	beq.n	8001934 <TIM_Base_SetConfig+0x40>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <TIM_Base_SetConfig+0x118>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00b      	beq.n	8001934 <TIM_Base_SetConfig+0x40>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <TIM_Base_SetConfig+0x11c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <TIM_Base_SetConfig+0x40>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3b      	ldr	r2, [pc, #236]	; (8001a14 <TIM_Base_SetConfig+0x120>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d003      	beq.n	8001934 <TIM_Base_SetConfig+0x40>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <TIM_Base_SetConfig+0x124>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d108      	bne.n	8001946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <TIM_Base_SetConfig+0x114>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001954:	d027      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <TIM_Base_SetConfig+0x118>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d023      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a2b      	ldr	r2, [pc, #172]	; (8001a10 <TIM_Base_SetConfig+0x11c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01f      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a2a      	ldr	r2, [pc, #168]	; (8001a14 <TIM_Base_SetConfig+0x120>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d01b      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <TIM_Base_SetConfig+0x124>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d017      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <TIM_Base_SetConfig+0x128>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <TIM_Base_SetConfig+0x12c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00f      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <TIM_Base_SetConfig+0x130>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00b      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <TIM_Base_SetConfig+0x134>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <TIM_Base_SetConfig+0x138>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d003      	beq.n	80019a6 <TIM_Base_SetConfig+0xb2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <TIM_Base_SetConfig+0x13c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d108      	bne.n	80019b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <TIM_Base_SetConfig+0x114>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d003      	beq.n	80019ec <TIM_Base_SetConfig+0xf8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <TIM_Base_SetConfig+0x124>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d103      	bne.n	80019f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	615a      	str	r2, [r3, #20]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40000800 	.word	0x40000800
 8001a14:	40000c00 	.word	0x40000c00
 8001a18:	40010400 	.word	0x40010400
 8001a1c:	40014000 	.word	0x40014000
 8001a20:	40014400 	.word	0x40014400
 8001a24:	40014800 	.word	0x40014800
 8001a28:	40001800 	.word	0x40001800
 8001a2c:	40001c00 	.word	0x40001c00
 8001a30:	40002000 	.word	0x40002000

08001a34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a50:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b30      	cmp	r3, #48	; 0x30
 8001a7c:	d05e      	beq.n	8001b3c <TIM_SlaveTimer_SetConfig+0x108>
 8001a7e:	2b30      	cmp	r3, #48	; 0x30
 8001a80:	d806      	bhi.n	8001a90 <TIM_SlaveTimer_SetConfig+0x5c>
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d05a      	beq.n	8001b3c <TIM_SlaveTimer_SetConfig+0x108>
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d058      	beq.n	8001b3c <TIM_SlaveTimer_SetConfig+0x108>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d056      	beq.n	8001b3c <TIM_SlaveTimer_SetConfig+0x108>
 8001a8e:	e052      	b.n	8001b36 <TIM_SlaveTimer_SetConfig+0x102>
 8001a90:	2b50      	cmp	r3, #80	; 0x50
 8001a92:	d03c      	beq.n	8001b0e <TIM_SlaveTimer_SetConfig+0xda>
 8001a94:	2b50      	cmp	r3, #80	; 0x50
 8001a96:	d802      	bhi.n	8001a9e <TIM_SlaveTimer_SetConfig+0x6a>
 8001a98:	2b40      	cmp	r3, #64	; 0x40
 8001a9a:	d00f      	beq.n	8001abc <TIM_SlaveTimer_SetConfig+0x88>
 8001a9c:	e04b      	b.n	8001b36 <TIM_SlaveTimer_SetConfig+0x102>
 8001a9e:	2b60      	cmp	r3, #96	; 0x60
 8001aa0:	d03f      	beq.n	8001b22 <TIM_SlaveTimer_SetConfig+0xee>
 8001aa2:	2b70      	cmp	r3, #112	; 0x70
 8001aa4:	d147      	bne.n	8001b36 <TIM_SlaveTimer_SetConfig+0x102>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68d9      	ldr	r1, [r3, #12]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f000 f8a6 	bl	8001c06 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8001aba:	e040      	b.n	8001b3e <TIM_SlaveTimer_SetConfig+0x10a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d101      	bne.n	8001ac8 <TIM_SlaveTimer_SetConfig+0x94>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e03b      	b.n	8001b40 <TIM_SlaveTimer_SetConfig+0x10c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	6a12      	ldr	r2, [r2, #32]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aee:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	621a      	str	r2, [r3, #32]
      break;
 8001b0c:	e017      	b.n	8001b3e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6899      	ldr	r1, [r3, #8]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f000 f814 	bl	8001b48 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001b20:	e00d      	b.n	8001b3e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6899      	ldr	r1, [r3, #8]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f000 f839 	bl	8001ba6 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001b34:	e003      	b.n	8001b3e <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
      break;
 8001b3a:	e000      	b.n	8001b3e <TIM_SlaveTimer_SetConfig+0x10a>
      break;
 8001b3c:	bf00      	nop
  }

  return status;
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	f023 0201 	bic.w	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f023 030a 	bic.w	r3, r3, #10
 8001b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	621a      	str	r2, [r3, #32]
}
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b087      	sub	sp, #28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	f023 0210 	bic.w	r2, r3, #16
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	031b      	lsls	r3, r3, #12
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	621a      	str	r2, [r3, #32]
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b087      	sub	sp, #28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	021a      	lsls	r2, r3, #8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	609a      	str	r2, [r3, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e05a      	b.n	8001d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d01d      	beq.n	8001cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d018      	beq.n	8001cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00e      	beq.n	8001cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d004      	beq.n	8001cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d10c      	bne.n	8001d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40010400 	.word	0x40010400
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40001800 	.word	0x40001800

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6a:	f7fe fd77 	bl	800085c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f000 f811 	bl	8001d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7fe fbb1 	bl	80004d8 <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d78:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d84:	08001e24 	.word	0x08001e24
  ldr r2, =_sbss
 8001d88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d8c:	20000078 	.word	0x20000078

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <__libc_init_array>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	4e0d      	ldr	r6, [pc, #52]	; (8001dcc <__libc_init_array+0x38>)
 8001d98:	4c0d      	ldr	r4, [pc, #52]	; (8001dd0 <__libc_init_array+0x3c>)
 8001d9a:	1ba4      	subs	r4, r4, r6
 8001d9c:	10a4      	asrs	r4, r4, #2
 8001d9e:	2500      	movs	r5, #0
 8001da0:	42a5      	cmp	r5, r4
 8001da2:	d109      	bne.n	8001db8 <__libc_init_array+0x24>
 8001da4:	4e0b      	ldr	r6, [pc, #44]	; (8001dd4 <__libc_init_array+0x40>)
 8001da6:	4c0c      	ldr	r4, [pc, #48]	; (8001dd8 <__libc_init_array+0x44>)
 8001da8:	f000 f820 	bl	8001dec <_init>
 8001dac:	1ba4      	subs	r4, r4, r6
 8001dae:	10a4      	asrs	r4, r4, #2
 8001db0:	2500      	movs	r5, #0
 8001db2:	42a5      	cmp	r5, r4
 8001db4:	d105      	bne.n	8001dc2 <__libc_init_array+0x2e>
 8001db6:	bd70      	pop	{r4, r5, r6, pc}
 8001db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dbc:	4798      	blx	r3
 8001dbe:	3501      	adds	r5, #1
 8001dc0:	e7ee      	b.n	8001da0 <__libc_init_array+0xc>
 8001dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dc6:	4798      	blx	r3
 8001dc8:	3501      	adds	r5, #1
 8001dca:	e7f2      	b.n	8001db2 <__libc_init_array+0x1e>
 8001dcc:	08001e1c 	.word	0x08001e1c
 8001dd0:	08001e1c 	.word	0x08001e1c
 8001dd4:	08001e1c 	.word	0x08001e1c
 8001dd8:	08001e20 	.word	0x08001e20

08001ddc <memset>:
 8001ddc:	4402      	add	r2, r0
 8001dde:	4603      	mov	r3, r0
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d100      	bne.n	8001de6 <memset+0xa>
 8001de4:	4770      	bx	lr
 8001de6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dea:	e7f9      	b.n	8001de0 <memset+0x4>

08001dec <_init>:
 8001dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dee:	bf00      	nop
 8001df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df2:	bc08      	pop	{r3}
 8001df4:	469e      	mov	lr, r3
 8001df6:	4770      	bx	lr

08001df8 <_fini>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr
