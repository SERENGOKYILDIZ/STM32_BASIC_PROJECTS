
072_I2C_2x16_LCD_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000218c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002344  08002344  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800234c  0800234c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000074  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006d3c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001403  00000000  00000000  00026dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006f8  00000000  00000000  000281c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000553  00000000  00000000  000288b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f4f1  00000000  00000000  00028e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000937f  00000000  00000000  000482fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bec48  00000000  00000000  0005167b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001bd0  00000000  00000000  001102c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  00111e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022fc 	.word	0x080022fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022fc 	.word	0x080022fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa12 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f84a 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8e0 	bl	8000694 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f8b0 	bl	8000638 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //findSlaveDeviceAddress();

  lcd_init();
 80004d8:	f001 febe 	bl	8002258 <lcd_init>
	  array[0] = 0x01;
	  array[1] = 0x02;
	  array[2] = 0x04;
	  HAL_I2C_Master_Transmit(&hi2c2, myDeviceAddress, (uint8_t *) array, sizeof(array), 100);
	  */
		lcd_send_cmd(0x80);
 80004dc:	2080      	movs	r0, #128	; 0x80
 80004de:	f001 fe5b 	bl	8002198 <lcd_send_cmd>
		lcd_send_string("E");
 80004e2:	481b      	ldr	r0, [pc, #108]	; (8000550 <main+0x8c>)
 80004e4:	f001 fec8 	bl	8002278 <lcd_send_string>
		HAL_Delay(500);
 80004e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ec:	f000 fa72 	bl	80009d4 <HAL_Delay>

		lcd_send_cmd(0x81);
 80004f0:	2081      	movs	r0, #129	; 0x81
 80004f2:	f001 fe51 	bl	8002198 <lcd_send_cmd>
		lcd_send_string("r");
 80004f6:	4817      	ldr	r0, [pc, #92]	; (8000554 <main+0x90>)
 80004f8:	f001 febe 	bl	8002278 <lcd_send_string>
		HAL_Delay(500);
 80004fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000500:	f000 fa68 	bl	80009d4 <HAL_Delay>

		lcd_send_cmd(0x82);
 8000504:	2082      	movs	r0, #130	; 0x82
 8000506:	f001 fe47 	bl	8002198 <lcd_send_cmd>
		lcd_send_string("e");
 800050a:	4813      	ldr	r0, [pc, #76]	; (8000558 <main+0x94>)
 800050c:	f001 feb4 	bl	8002278 <lcd_send_string>
		HAL_Delay(500);
 8000510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000514:	f000 fa5e 	bl	80009d4 <HAL_Delay>

		lcd_send_cmd(0x83);
 8000518:	2083      	movs	r0, #131	; 0x83
 800051a:	f001 fe3d 	bl	8002198 <lcd_send_cmd>
		lcd_send_string("n");
 800051e:	480f      	ldr	r0, [pc, #60]	; (800055c <main+0x98>)
 8000520:	f001 feaa 	bl	8002278 <lcd_send_string>
		HAL_Delay(500);
 8000524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000528:	f000 fa54 	bl	80009d4 <HAL_Delay>

		lcd_send_cmd(0xc0);
 800052c:	20c0      	movs	r0, #192	; 0xc0
 800052e:	f001 fe33 	bl	8002198 <lcd_send_cmd>
		lcd_send_string("Osman");
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x9c>)
 8000534:	f001 fea0 	bl	8002278 <lcd_send_string>
		HAL_Delay(2000);
 8000538:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800053c:	f000 fa4a 	bl	80009d4 <HAL_Delay>

		lcd_send_cmd(0x01);
 8000540:	2001      	movs	r0, #1
 8000542:	f001 fe29 	bl	8002198 <lcd_send_cmd>
		HAL_Delay(100);
 8000546:	2064      	movs	r0, #100	; 0x64
 8000548:	f000 fa44 	bl	80009d4 <HAL_Delay>
		lcd_send_cmd(0x80);
 800054c:	e7c6      	b.n	80004dc <main+0x18>
 800054e:	bf00      	nop
 8000550:	08002314 	.word	0x08002314
 8000554:	08002318 	.word	0x08002318
 8000558:	0800231c 	.word	0x0800231c
 800055c:	08002320 	.word	0x08002320
 8000560:	08002324 	.word	0x08002324

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fe95 	bl	80022a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	; 0xa8
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f951 	bl	8001890 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f8a0 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fbb2 	bl	8001d80 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f889 	bl	8000738 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C1_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <MX_I2C1_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C1_Init+0x50>)
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_I2C1_Init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_I2C1_Init+0x50>)
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_I2C1_Init+0x50>)
 8000676:	f000 fc6d 	bl	8000f54 <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 f85a 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	40005400 	.word	0x40005400
 8000690:	00061a80 	.word	0x00061a80

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_GPIO_Init+0xa0>)
 8000706:	f000 fc0b 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800070a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0xa0>)
 8000724:	f000 fa60 	bl	8000be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020c00 	.word	0x40020c00

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <HAL_MspInit+0x4c>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000782:	2007      	movs	r0, #7
 8000784:	f000 f9fc 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_I2C_MspInit+0x84>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d12b      	bne.n	800080e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_I2C_MspInit+0x88>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_I2C_MspInit+0x88>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_I2C_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007d2:	23c0      	movs	r3, #192	; 0xc0
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d6:	2312      	movs	r3, #18
 80007d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e2:	2304      	movs	r3, #4
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <HAL_I2C_MspInit+0x8c>)
 80007ee:	f000 f9fb 	bl	8000be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_I2C_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_I2C_MspInit+0x88>)
 80007fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_I2C_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40005400 	.word	0x40005400
 800081c:	40023800 	.word	0x40023800
 8000820:	40020400 	.word	0x40020400

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f890 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a0:	f7ff ffea 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	; (80008dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	; (80008e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f001 fcf3 	bl	80022b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fdf9 	bl	80004c4 <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e0:	08002354 	.word	0x08002354
  ldr r2, =_sbss
 80008e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e8:	20000080 	.word	0x20000080

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f931 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff ff0e 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f93b 	bl	8000bce <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f911 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	2000007c 	.word	0x2000007c

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000007c 	.word	0x2000007c

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff47 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff5c 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff8e 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffb0 	bl	8000b3c <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	e16b      	b.n	8000edc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c04:	2201      	movs	r2, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 815a 	bne.w	8000ed6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d005      	beq.n	8000c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d130      	bne.n	8000c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c70:	2201      	movs	r2, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	f003 0201 	and.w	r2, r3, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d017      	beq.n	8000cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d123      	bne.n	8000d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	08da      	lsrs	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3208      	adds	r2, #8
 8000d26:	69b9      	ldr	r1, [r7, #24]
 8000d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0203 	and.w	r2, r3, #3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80b4 	beq.w	8000ed6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <HAL_GPIO_Init+0x30c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a5f      	ldr	r2, [pc, #380]	; (8000ef4 <HAL_GPIO_Init+0x30c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <HAL_GPIO_Init+0x30c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8a:	4a5b      	ldr	r2, [pc, #364]	; (8000ef8 <HAL_GPIO_Init+0x310>)
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a52      	ldr	r2, [pc, #328]	; (8000efc <HAL_GPIO_Init+0x314>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02b      	beq.n	8000e0e <HAL_GPIO_Init+0x226>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a51      	ldr	r2, [pc, #324]	; (8000f00 <HAL_GPIO_Init+0x318>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d025      	beq.n	8000e0a <HAL_GPIO_Init+0x222>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a50      	ldr	r2, [pc, #320]	; (8000f04 <HAL_GPIO_Init+0x31c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01f      	beq.n	8000e06 <HAL_GPIO_Init+0x21e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4f      	ldr	r2, [pc, #316]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x21a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4e      	ldr	r2, [pc, #312]	; (8000f0c <HAL_GPIO_Init+0x324>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x216>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4d      	ldr	r2, [pc, #308]	; (8000f10 <HAL_GPIO_Init+0x328>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x212>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4c      	ldr	r2, [pc, #304]	; (8000f14 <HAL_GPIO_Init+0x32c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x20e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <HAL_GPIO_Init+0x330>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x20a>
 8000dee:	2307      	movs	r3, #7
 8000df0:	e00e      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000df2:	2308      	movs	r3, #8
 8000df4:	e00c      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000df6:	2306      	movs	r3, #6
 8000df8:	e00a      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x228>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4935      	ldr	r1, [pc, #212]	; (8000ef8 <HAL_GPIO_Init+0x310>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e52:	4a32      	ldr	r2, [pc, #200]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e58:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e7c:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea6:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_GPIO_Init+0x334>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f ae90 	bls.w	8000c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40021400 	.word	0x40021400
 8000f14:	40021800 	.word	0x40021800
 8000f18:	40021c00 	.word	0x40021c00
 8000f1c:	40013c00 	.word	0x40013c00

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f30:	787b      	ldrb	r3, [r7, #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f3c:	e003      	b.n	8000f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	619a      	str	r2, [r3, #24]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e12b      	b.n	80011be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fc0a 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2224      	movs	r2, #36	; 0x24
 8000f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fb8:	f001 f8da 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8000fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a81      	ldr	r2, [pc, #516]	; (80011c8 <HAL_I2C_Init+0x274>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d807      	bhi.n	8000fd8 <HAL_I2C_Init+0x84>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4a80      	ldr	r2, [pc, #512]	; (80011cc <HAL_I2C_Init+0x278>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	bf94      	ite	ls
 8000fd0:	2301      	movls	r3, #1
 8000fd2:	2300      	movhi	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	e006      	b.n	8000fe6 <HAL_I2C_Init+0x92>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4a7d      	ldr	r2, [pc, #500]	; (80011d0 <HAL_I2C_Init+0x27c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	bf94      	ite	ls
 8000fe0:	2301      	movls	r3, #1
 8000fe2:	2300      	movhi	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0e7      	b.n	80011be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4a78      	ldr	r2, [pc, #480]	; (80011d4 <HAL_I2C_Init+0x280>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0c9b      	lsrs	r3, r3, #18
 8000ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	430a      	orrs	r2, r1
 800100c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a6a      	ldr	r2, [pc, #424]	; (80011c8 <HAL_I2C_Init+0x274>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d802      	bhi.n	8001028 <HAL_I2C_Init+0xd4>
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3301      	adds	r3, #1
 8001026:	e009      	b.n	800103c <HAL_I2C_Init+0xe8>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	4a69      	ldr	r2, [pc, #420]	; (80011d8 <HAL_I2C_Init+0x284>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	099b      	lsrs	r3, r3, #6
 800103a:	3301      	adds	r3, #1
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	430b      	orrs	r3, r1
 8001042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800104e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	495c      	ldr	r1, [pc, #368]	; (80011c8 <HAL_I2C_Init+0x274>)
 8001058:	428b      	cmp	r3, r1
 800105a:	d819      	bhi.n	8001090 <HAL_I2C_Init+0x13c>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1e59      	subs	r1, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fbb1 f3f3 	udiv	r3, r1, r3
 800106a:	1c59      	adds	r1, r3, #1
 800106c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001070:	400b      	ands	r3, r1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00a      	beq.n	800108c <HAL_I2C_Init+0x138>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1e59      	subs	r1, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fbb1 f3f3 	udiv	r3, r1, r3
 8001084:	3301      	adds	r3, #1
 8001086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108a:	e051      	b.n	8001130 <HAL_I2C_Init+0x1dc>
 800108c:	2304      	movs	r3, #4
 800108e:	e04f      	b.n	8001130 <HAL_I2C_Init+0x1dc>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d111      	bne.n	80010bc <HAL_I2C_Init+0x168>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1e58      	subs	r0, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	440b      	add	r3, r1
 80010a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	e012      	b.n	80010e2 <HAL_I2C_Init+0x18e>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1e58      	subs	r0, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	0099      	lsls	r1, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d2:	3301      	adds	r3, #1
 80010d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_I2C_Init+0x196>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e022      	b.n	8001130 <HAL_I2C_Init+0x1dc>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10e      	bne.n	8001110 <HAL_I2C_Init+0x1bc>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1e58      	subs	r0, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6859      	ldr	r1, [r3, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	440b      	add	r3, r1
 8001100:	fbb0 f3f3 	udiv	r3, r0, r3
 8001104:	3301      	adds	r3, #1
 8001106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110e:	e00f      	b.n	8001130 <HAL_I2C_Init+0x1dc>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1e58      	subs	r0, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	0099      	lsls	r1, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	fbb0 f3f3 	udiv	r3, r0, r3
 8001126:	3301      	adds	r3, #1
 8001128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	6809      	ldr	r1, [r1, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800115e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6911      	ldr	r1, [r2, #16]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68d2      	ldr	r2, [r2, #12]
 800116a:	4311      	orrs	r1, r2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	430b      	orrs	r3, r1
 8001172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	000186a0 	.word	0x000186a0
 80011cc:	001e847f 	.word	0x001e847f
 80011d0:	003d08ff 	.word	0x003d08ff
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	10624dd3 	.word	0x10624dd3

080011dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	461a      	mov	r2, r3
 80011e8:	460b      	mov	r3, r1
 80011ea:	817b      	strh	r3, [r7, #10]
 80011ec:	4613      	mov	r3, r2
 80011ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff fbe4 	bl	80009bc <HAL_GetTick>
 80011f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b20      	cmp	r3, #32
 8001200:	f040 80e0 	bne.w	80013c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2319      	movs	r3, #25
 800120a:	2201      	movs	r2, #1
 800120c:	4970      	ldr	r1, [pc, #448]	; (80013d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f964 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800121a:	2302      	movs	r3, #2
 800121c:	e0d3      	b.n	80013c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_I2C_Master_Transmit+0x50>
 8001228:	2302      	movs	r3, #2
 800122a:	e0cc      	b.n	80013c6 <HAL_I2C_Master_Transmit+0x1ea>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d007      	beq.n	8001252 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001260:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2221      	movs	r2, #33	; 0x21
 8001266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2210      	movs	r2, #16
 800126e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	893a      	ldrh	r2, [r7, #8]
 8001282:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29a      	uxth	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4a50      	ldr	r2, [pc, #320]	; (80013d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001294:	8979      	ldrh	r1, [r7, #10]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	6a3a      	ldr	r2, [r7, #32]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f89c 	bl	80013d8 <I2C_MasterRequestWrite>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e08d      	b.n	80013c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012c0:	e066      	b.n	8001390 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	6a39      	ldr	r1, [r7, #32]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 fa22 	bl	8001710 <I2C_WaitOnTXEFlagUntilTimeout>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00d      	beq.n	80012ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d107      	bne.n	80012ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06b      	b.n	80013c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b04      	cmp	r3, #4
 800132a:	d11b      	bne.n	8001364 <HAL_I2C_Master_Transmit+0x188>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001330:	2b00      	cmp	r3, #0
 8001332:	d017      	beq.n	8001364 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	6a39      	ldr	r1, [r7, #32]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 fa19 	bl	80017a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00d      	beq.n	8001390 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	2b04      	cmp	r3, #4
 800137a:	d107      	bne.n	800138c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800138a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e01a      	b.n	80013c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001394:	2b00      	cmp	r3, #0
 8001396:	d194      	bne.n	80012c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2220      	movs	r2, #32
 80013ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e000      	b.n	80013c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013c4:	2302      	movs	r3, #2
  }
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	00100002 	.word	0x00100002
 80013d4:	ffff0000 	.word	0xffff0000

080013d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	460b      	mov	r3, r1
 80013e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d006      	beq.n	8001402 <I2C_MasterRequestWrite+0x2a>
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d003      	beq.n	8001402 <I2C_MasterRequestWrite+0x2a>
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001400:	d108      	bne.n	8001414 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e00b      	b.n	800142c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	2b12      	cmp	r3, #18
 800141a:	d107      	bne.n	800142c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800142a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f84f 	bl	80014dc <I2C_WaitOnFlagUntilTimeout>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00d      	beq.n	8001460 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001452:	d103      	bne.n	800145c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e035      	b.n	80014cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001468:	d108      	bne.n	800147c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800146a:	897b      	ldrh	r3, [r7, #10]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	e01b      	b.n	80014b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800147c:	897b      	ldrh	r3, [r7, #10]
 800147e:	11db      	asrs	r3, r3, #7
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f003 0306 	and.w	r3, r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f063 030f 	orn	r3, r3, #15
 800148c:	b2da      	uxtb	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	490e      	ldr	r1, [pc, #56]	; (80014d4 <I2C_MasterRequestWrite+0xfc>)
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f898 	bl	80015d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e010      	b.n	80014cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <I2C_MasterRequestWrite+0x100>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f888 	bl	80015d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	00010008 	.word	0x00010008
 80014d8:	00010002 	.word	0x00010002

080014dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ec:	e048      	b.n	8001580 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d044      	beq.n	8001580 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014f6:	f7ff fa61 	bl	80009bc <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d139      	bne.n	8001580 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	0c1b      	lsrs	r3, r3, #16
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10d      	bne.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	43da      	mvns	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4013      	ands	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	e00c      	b.n	800154c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	43da      	mvns	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4013      	ands	r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	429a      	cmp	r2, r3
 8001550:	d116      	bne.n	8001580 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2220      	movs	r2, #32
 800155c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f043 0220 	orr.w	r2, r3, #32
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e023      	b.n	80015c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	0c1b      	lsrs	r3, r3, #16
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10d      	bne.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	43da      	mvns	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4013      	ands	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	e00c      	b.n	80015c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	43da      	mvns	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	4013      	ands	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d093      	beq.n	80014ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015de:	e071      	b.n	80016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d123      	bne.n	8001638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2220      	movs	r2, #32
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f043 0204 	orr.w	r2, r3, #4
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e067      	b.n	8001708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163e:	d041      	beq.n	80016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001640:	f7ff f9bc 	bl	80009bc <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d302      	bcc.n	8001656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d136      	bne.n	80016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10c      	bne.n	800167a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4013      	ands	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	e00b      	b.n	8001692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	43da      	mvns	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4013      	ands	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2220      	movs	r2, #32
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f043 0220 	orr.w	r2, r3, #32
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e021      	b.n	8001708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	0c1b      	lsrs	r3, r3, #16
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10c      	bne.n	80016e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	43da      	mvns	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	4013      	ands	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e00b      	b.n	8001700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4013      	ands	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f af6d 	bne.w	80015e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800171c:	e034      	b.n	8001788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f886 	bl	8001830 <I2C_IsAcknowledgeFailed>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e034      	b.n	8001798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d028      	beq.n	8001788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001736:	f7ff f941 	bl	80009bc <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	d302      	bcc.n	800174c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d11d      	bne.n	8001788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b80      	cmp	r3, #128	; 0x80
 8001758:	d016      	beq.n	8001788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2220      	movs	r2, #32
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e007      	b.n	8001798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	2b80      	cmp	r3, #128	; 0x80
 8001794:	d1c3      	bne.n	800171e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017ac:	e034      	b.n	8001818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f83e 	bl	8001830 <I2C_IsAcknowledgeFailed>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e034      	b.n	8001828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d028      	beq.n	8001818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c6:	f7ff f8f9 	bl	80009bc <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d302      	bcc.n	80017dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d11d      	bne.n	8001818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d016      	beq.n	8001818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2220      	movs	r2, #32
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e007      	b.n	8001828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b04      	cmp	r3, #4
 8001824:	d1c3      	bne.n	80017ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001846:	d11b      	bne.n	8001880 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001850:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f043 0204 	orr.w	r2, r3, #4
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e267      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d075      	beq.n	800199a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ae:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d00c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ba:	4b85      	ldr	r3, [pc, #532]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d112      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d2:	d10b      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4b7e      	ldr	r3, [pc, #504]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d05b      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d157      	bne.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e242      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0x74>
 80018f6:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a75      	ldr	r2, [pc, #468]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6f      	ldr	r2, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6c      	ldr	r2, [pc, #432]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001928:	4b69      	ldr	r3, [pc, #420]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a68      	ldr	r2, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a65      	ldr	r2, [pc, #404]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff f838 	bl	80009bc <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff f834 	bl	80009bc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e207      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xc0>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff f824 	bl	80009bc <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff f820 	bl	80009bc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1f3      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a6:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1c7      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4937      	ldr	r1, [pc, #220]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_OscConfig+0x244>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7fe ffd9 	bl	80009bc <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7fe ffd5 	bl	80009bc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e1a8      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4925      	ldr	r1, [pc, #148]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_RCC_OscConfig+0x244>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7fe ffb8 	bl	80009bc <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7fe ffb4 	bl	80009bc <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e187      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d036      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d016      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_RCC_OscConfig+0x248>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7fe ff98 	bl	80009bc <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7fe ff94 	bl	80009bc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e167      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x200>
 8001aae:	e01b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x248>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe ff81 	bl	80009bc <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	e00e      	b.n	8001adc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7fe ff7d 	bl	80009bc <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d907      	bls.n	8001adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e150      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	42470000 	.word	0x42470000
 8001ad8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001adc:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ea      	bne.n	8001abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8097 	beq.w	8001c24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afa:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10f      	bne.n	8001b26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a7c      	ldr	r2, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b7a      	ldr	r3, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	4b77      	ldr	r3, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x474>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b32:	4b74      	ldr	r3, [pc, #464]	; (8001d04 <HAL_RCC_OscConfig+0x474>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a73      	ldr	r2, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x474>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3e:	f7fe ff3d 	bl	80009bc <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7fe ff39 	bl	80009bc <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e10c      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x474>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x2ea>
 8001b6c:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	e01c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x324>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x30c>
 8001b82:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	4a5e      	ldr	r2, [pc, #376]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a5b      	ldr	r2, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x324>
 8001b9c:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a54      	ldr	r2, [pc, #336]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001bae:	f023 0304 	bic.w	r3, r3, #4
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d015      	beq.n	8001be8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7fe fefe 	bl	80009bc <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7fe fefa 	bl	80009bc <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e0cb      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bda:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0ee      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x334>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7fe fee8 	bl	80009bc <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fee4 	bl	80009bc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0b5      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ee      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a1 	beq.w	8001d70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d05c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d141      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_RCC_OscConfig+0x478>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7fe feb8 	bl	80009bc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c50:	f7fe feb4 	bl	80009bc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e087      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	019b      	lsls	r3, r3, #6
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	3b01      	subs	r3, #1
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	491b      	ldr	r1, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_OscConfig+0x478>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7fe fe8d 	bl	80009bc <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe fe89 	bl	80009bc <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e05c      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x416>
 8001cc4:	e054      	b.n	8001d70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCC_OscConfig+0x478>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fe76 	bl	80009bc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7fe fe72 	bl	80009bc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e045      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x444>
 8001cf2:	e03d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e038      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40007000 	.word	0x40007000
 8001d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x4ec>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d028      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d121      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d11a      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d111      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	3b01      	subs	r3, #1
 8001d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0cc      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d90c      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0b8      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	494d      	ldr	r1, [pc, #308]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d044      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d119      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e07f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e06f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e067      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4934      	ldr	r1, [pc, #208]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e70:	f7fe fda4 	bl	80009bc <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7fe fda0 	bl	80009bc <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e04f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d20c      	bcs.n	8001ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e032      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4916      	ldr	r1, [pc, #88]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	490e      	ldr	r1, [pc, #56]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f06:	f000 f821 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	5ccb      	ldrb	r3, [r1, r3]
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fd04 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	0800232c 	.word	0x0800232c
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f50:	b094      	sub	sp, #80	; 0x50
 8001f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	647b      	str	r3, [r7, #68]	; 0x44
 8001f58:	2300      	movs	r3, #0
 8001f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f64:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d00d      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x40>
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	f200 80e1 	bhi.w	8002138 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f7e:	e0db      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f80:	4b73      	ldr	r3, [pc, #460]	; (8002150 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f84:	e0db      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f8a:	e0d8      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8c:	4b6f      	ldr	r3, [pc, #444]	; (800214c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f96:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d063      	beq.n	800206a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa2:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	2200      	movs	r2, #0
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001fba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f04f 0100 	mov.w	r1, #0
 8001fca:	0159      	lsls	r1, r3, #5
 8001fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd0:	0150      	lsls	r0, r2, #5
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	1a51      	subs	r1, r2, r1
 8001fda:	6139      	str	r1, [r7, #16]
 8001fdc:	4629      	mov	r1, r5
 8001fde:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ff0:	4659      	mov	r1, fp
 8001ff2:	018b      	lsls	r3, r1, #6
 8001ff4:	4651      	mov	r1, sl
 8001ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ffa:	4651      	mov	r1, sl
 8001ffc:	018a      	lsls	r2, r1, #6
 8001ffe:	4651      	mov	r1, sl
 8002000:	ebb2 0801 	subs.w	r8, r2, r1
 8002004:	4659      	mov	r1, fp
 8002006:	eb63 0901 	sbc.w	r9, r3, r1
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800201a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800201e:	4690      	mov	r8, r2
 8002020:	4699      	mov	r9, r3
 8002022:	4623      	mov	r3, r4
 8002024:	eb18 0303 	adds.w	r3, r8, r3
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	462b      	mov	r3, r5
 800202c:	eb49 0303 	adc.w	r3, r9, r3
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800203e:	4629      	mov	r1, r5
 8002040:	024b      	lsls	r3, r1, #9
 8002042:	4621      	mov	r1, r4
 8002044:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002048:	4621      	mov	r1, r4
 800204a:	024a      	lsls	r2, r1, #9
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002052:	2200      	movs	r2, #0
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
 8002056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800205c:	f7fe f8b4 	bl	80001c8 <__aeabi_uldivmod>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4613      	mov	r3, r2
 8002066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002068:	e058      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_RCC_GetSysClockFreq+0x200>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	2200      	movs	r2, #0
 8002072:	4618      	mov	r0, r3
 8002074:	4611      	mov	r1, r2
 8002076:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002084:	4642      	mov	r2, r8
 8002086:	464b      	mov	r3, r9
 8002088:	f04f 0000 	mov.w	r0, #0
 800208c:	f04f 0100 	mov.w	r1, #0
 8002090:	0159      	lsls	r1, r3, #5
 8002092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002096:	0150      	lsls	r0, r2, #5
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4641      	mov	r1, r8
 800209e:	ebb2 0a01 	subs.w	sl, r2, r1
 80020a2:	4649      	mov	r1, r9
 80020a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020bc:	ebb2 040a 	subs.w	r4, r2, sl
 80020c0:	eb63 050b 	sbc.w	r5, r3, fp
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	00eb      	lsls	r3, r5, #3
 80020ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d2:	00e2      	lsls	r2, r4, #3
 80020d4:	4614      	mov	r4, r2
 80020d6:	461d      	mov	r5, r3
 80020d8:	4643      	mov	r3, r8
 80020da:	18e3      	adds	r3, r4, r3
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	464b      	mov	r3, r9
 80020e0:	eb45 0303 	adc.w	r3, r5, r3
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f2:	4629      	mov	r1, r5
 80020f4:	028b      	lsls	r3, r1, #10
 80020f6:	4621      	mov	r1, r4
 80020f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020fc:	4621      	mov	r1, r4
 80020fe:	028a      	lsls	r2, r1, #10
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002106:	2200      	movs	r2, #0
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	61fa      	str	r2, [r7, #28]
 800210c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002110:	f7fe f85a 	bl	80001c8 <__aeabi_uldivmod>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4613      	mov	r3, r2
 800211a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_GetSysClockFreq+0x200>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	3301      	adds	r3, #1
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800212c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800212e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002136:	e002      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetSysClockFreq+0x204>)
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800213c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002140:	4618      	mov	r0, r3
 8002142:	3750      	adds	r7, #80	; 0x50
 8002144:	46bd      	mov	sp, r7
 8002146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	00f42400 	.word	0x00f42400
 8002154:	007a1200 	.word	0x007a1200

08002158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_GetHCLKFreq+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002174:	f7ff fff0 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0a9b      	lsrs	r3, r3, #10
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	0800233c 	.word	0x0800233c

08002198 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f023 030f 	bic.w	r3, r3, #15
 80021a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	f043 030c 	orr.w	r3, r3, #12
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	f043 030c 	orr.w	r3, r3, #12
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80021d8:	f107 0208 	add.w	r2, r7, #8
 80021dc:	2364      	movs	r3, #100	; 0x64
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2304      	movs	r3, #4
 80021e2:	214e      	movs	r1, #78	; 0x4e
 80021e4:	4803      	ldr	r0, [pc, #12]	; (80021f4 <lcd_send_cmd+0x5c>)
 80021e6:	f7fe fff9 	bl	80011dc <HAL_I2C_Master_Transmit>
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000028 	.word	0x20000028

080021f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f023 030f 	bic.w	r3, r3, #15
 8002208:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	f043 030d 	orr.w	r3, r3, #13
 8002216:	b2db      	uxtb	r3, r3
 8002218:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	f043 0309 	orr.w	r3, r3, #9
 8002220:	b2db      	uxtb	r3, r3
 8002222:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	f043 030d 	orr.w	r3, r3, #13
 800222a:	b2db      	uxtb	r3, r3
 800222c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	f043 0309 	orr.w	r3, r3, #9
 8002234:	b2db      	uxtb	r3, r3
 8002236:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002238:	f107 0208 	add.w	r2, r7, #8
 800223c:	2364      	movs	r3, #100	; 0x64
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2304      	movs	r3, #4
 8002242:	214e      	movs	r1, #78	; 0x4e
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <lcd_send_data+0x5c>)
 8002246:	f7fe ffc9 	bl	80011dc <HAL_I2C_Master_Transmit>
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000028 	.word	0x20000028

08002258 <lcd_init>:

void lcd_init (void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800225c:	2002      	movs	r0, #2
 800225e:	f7ff ff9b 	bl	8002198 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8002262:	2028      	movs	r0, #40	; 0x28
 8002264:	f7ff ff98 	bl	8002198 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8002268:	200c      	movs	r0, #12
 800226a:	f7ff ff95 	bl	8002198 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800226e:	2080      	movs	r0, #128	; 0x80
 8002270:	f7ff ff92 	bl	8002198 <lcd_send_cmd>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	while (*str)
 8002280:	e006      	b.n	8002290 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ffb4 	bl	80021f8 <lcd_send_data>
	while (*str)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f4      	bne.n	8002282 <lcd_send_string+0xa>
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <memset>:
 80022a2:	4402      	add	r2, r0
 80022a4:	4603      	mov	r3, r0
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d100      	bne.n	80022ac <memset+0xa>
 80022aa:	4770      	bx	lr
 80022ac:	f803 1b01 	strb.w	r1, [r3], #1
 80022b0:	e7f9      	b.n	80022a6 <memset+0x4>
	...

080022b4 <__libc_init_array>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4d0d      	ldr	r5, [pc, #52]	; (80022ec <__libc_init_array+0x38>)
 80022b8:	4c0d      	ldr	r4, [pc, #52]	; (80022f0 <__libc_init_array+0x3c>)
 80022ba:	1b64      	subs	r4, r4, r5
 80022bc:	10a4      	asrs	r4, r4, #2
 80022be:	2600      	movs	r6, #0
 80022c0:	42a6      	cmp	r6, r4
 80022c2:	d109      	bne.n	80022d8 <__libc_init_array+0x24>
 80022c4:	4d0b      	ldr	r5, [pc, #44]	; (80022f4 <__libc_init_array+0x40>)
 80022c6:	4c0c      	ldr	r4, [pc, #48]	; (80022f8 <__libc_init_array+0x44>)
 80022c8:	f000 f818 	bl	80022fc <_init>
 80022cc:	1b64      	subs	r4, r4, r5
 80022ce:	10a4      	asrs	r4, r4, #2
 80022d0:	2600      	movs	r6, #0
 80022d2:	42a6      	cmp	r6, r4
 80022d4:	d105      	bne.n	80022e2 <__libc_init_array+0x2e>
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022dc:	4798      	blx	r3
 80022de:	3601      	adds	r6, #1
 80022e0:	e7ee      	b.n	80022c0 <__libc_init_array+0xc>
 80022e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e6:	4798      	blx	r3
 80022e8:	3601      	adds	r6, #1
 80022ea:	e7f2      	b.n	80022d2 <__libc_init_array+0x1e>
 80022ec:	0800234c 	.word	0x0800234c
 80022f0:	0800234c 	.word	0x0800234c
 80022f4:	0800234c 	.word	0x0800234c
 80022f8:	08002350 	.word	0x08002350

080022fc <_init>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	bf00      	nop
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr

08002308 <_fini>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	bf00      	nop
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr
