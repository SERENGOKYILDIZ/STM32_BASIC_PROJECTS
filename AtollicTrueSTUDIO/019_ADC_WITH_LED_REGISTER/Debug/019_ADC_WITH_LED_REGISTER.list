
019_ADC_WITH_LED_REGISTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c24  08000c24  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c28  08000c28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08000c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          0000009c  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c0  200000c0  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   000036dd  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a52  00000000  00000000  00023731  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000470  00000000  00000000  00024188  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f8  00000000  00000000  000245f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001a5a  00000000  00000000  000249f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001bcc  00000000  00000000  0002644a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00028016  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000113c  00000000  00000000  00028094  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000291d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c0c 	.word	0x08000c0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08000c0c 	.word	0x08000c0c

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	887a      	ldrh	r2, [r7, #2]
 80003fc:	819a      	strh	r2, [r3, #12]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800040a:	b480      	push	{r7}
 800040c:	b085      	sub	sp, #20
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	891b      	ldrh	r3, [r3, #8]
 800041e:	b29a      	uxth	r2, r3
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	4013      	ands	r3, r2
 8000424:	b29b      	uxth	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	d002      	beq.n	8000430 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800042a:	2301      	movs	r3, #1
 800042c:	73fb      	strb	r3, [r7, #15]
 800042e:	e001      	b.n	8000434 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000448:	4b38      	ldr	r3, [pc, #224]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b38      	ldr	r3, [pc, #224]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4619      	mov	r1, r3
 8000452:	4610      	mov	r0, r2
 8000454:	f7ff ff60 	bl	8000318 <DMA_GetFlagStatus>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d064      	beq.n	8000528 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800045e:	4b35      	ldr	r3, [pc, #212]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d04c      	beq.n	8000500 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000466:	bf00      	nop
 8000468:	4b30      	ldr	r3, [pc, #192]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff3b 	bl	80002e8 <DMA_GetCmdStatus>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f7      	bne.n	8000468 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	4610      	mov	r0, r2
 8000484:	f7ff ff84 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b2b      	ldr	r3, [pc, #172]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 8000490:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000492:	4b28      	ldr	r3, [pc, #160]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049a:	4293      	cmp	r3, r2
 800049c:	bf28      	it	cs
 800049e:	4613      	movcs	r3, r2
 80004a0:	4a26      	ldr	r2, [pc, #152]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 80004a2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4924      	ldr	r1, [pc, #144]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fea8 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fefa 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004c8:	d203      	bcs.n	80004d2 <Audio_MAL_IRQHandler+0x8e>
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	e000      	b.n	80004d4 <Audio_MAL_IRQHandler+0x90>
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <Audio_MAL_IRQHandler+0xfc>)
 80004d4:	4413      	add	r3, r2
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 80004d8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004e6:	428b      	cmp	r3, r1
 80004e8:	bf28      	it	cs
 80004ea:	460b      	movcs	r3, r1
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004f0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2101      	movs	r1, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fed9 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80004fe:	e013      	b.n	8000528 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fed2 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4610      	mov	r0, r2
 8000518:	f7ff ff3a 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f9b4 	bl	8000890 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000008 	.word	0x20000008
 8000530:	2000000c 	.word	0x2000000c
 8000534:	20000000 	.word	0x20000000
 8000538:	20000040 	.word	0x20000040
 800053c:	20000080 	.word	0x20000080
 8000540:	0001fffe 	.word	0x0001fffe

08000544 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000548:	f7ff ff7c 	bl	8000444 <Audio_MAL_IRQHandler>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000554:	f7ff ff76 	bl	8000444 <Audio_MAL_IRQHandler>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000560:	2102      	movs	r1, #2
 8000562:	480d      	ldr	r0, [pc, #52]	; (8000598 <SPI3_IRQHandler+0x3c>)
 8000564:	f7ff ff51 	bl	800040a <SPI_I2S_GetFlagStatus>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d011      	beq.n	8000592 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <SPI3_IRQHandler+0x40>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d106      	bne.n	8000584 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000576:	f000 f996 	bl	80008a6 <EVAL_AUDIO_GetSampleCallBack>
 800057a:	4603      	mov	r3, r0
 800057c:	4619      	mov	r1, r3
 800057e:	2004      	movs	r0, #4
 8000580:	f7ff fe22 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000584:	f000 f98f 	bl	80008a6 <EVAL_AUDIO_GetSampleCallBack>
 8000588:	4603      	mov	r3, r0
 800058a:	4619      	mov	r1, r3
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <SPI3_IRQHandler+0x3c>)
 800058e:	f7ff ff2d 	bl	80003ec <SPI_I2S_SendData>
  }
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40003c00 	.word	0x40003c00
 800059c:	20000004 	.word	0x20000004

080005a0 <RCC_Config>:
#include "stm32f4_discovery.h"

uint8_t adc_value;

void RCC_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	 *APB2   = 84Mhz  (Prescaler:2)
	 *-///////////////////////
	*/

	//Settings of Opening HSE
	RCC->CR &= ~(1 << 0);               //->HSION = 0, (HSI=OFF)
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <RCC_Config+0xa8>)
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <RCC_Config+0xa8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f023 0301 	bic.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]
	while((RCC->CR & 0X3));				//->Wait HSI deactivate.
 80005b0:	bf00      	nop
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <RCC_Config+0xa8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f003 0303 	and.w	r3, r3, #3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f9      	bne.n	80005b2 <RCC_Config+0x12>
	RCC->CR |= (1 << 16); 				//->HSEON = 1, (HSE=ON)
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <RCC_Config+0xa8>)
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <RCC_Config+0xa8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1 << 17))); 		//->Wait HSE active
 80005ca:	bf00      	nop
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <RCC_Config+0xa8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f9      	beq.n	80005cc <RCC_Config+0x2c>

	//Settings of PLL
	RCC->CR |= (1<<19); 				//->CSSON = 1.
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <RCC_Config+0xa8>)
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <RCC_Config+0xa8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005e2:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (1 << 22); 			//->PLLSRC = 1, (PLL Source = HSE)
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <RCC_Config+0xa8>)
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <RCC_Config+0xa8>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ee:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (4<<0); 			//->PLL_M = 4
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <RCC_Config+0xa8>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <RCC_Config+0xa8>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (168<<6); 			//->PLL_N = 168
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <RCC_Config+0xa8>)
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <RCC_Config+0xa8>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000606:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00; 				//->PLL_P = 2
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <RCC_Config+0xa8>)
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <RCC_Config+0xa8>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	6053      	str	r3, [r2, #4]

	//Settings of Prescaler
	RCC->CFGR = 0x0;                    //->AHB  Prescaler = 1
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <RCC_Config+0xa8>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (5 << 10);             //->APB1 Prescaler = 4
 8000616:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <RCC_Config+0xa8>)
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <RCC_Config+0xa8>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000620:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (4 << 13);             //->APB2 Prescaler = 2
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <RCC_Config+0xa8>)
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <RCC_Config+0xa8>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062c:	6093      	str	r3, [r2, #8]

	RCC->CR = (1<<19);                  //-> HSERDY Flag clear.
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <RCC_Config+0xa8>)
 8000630:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000634:	601a      	str	r2, [r3, #0]
	RCC->CR = (1<<23);                  //-> CSS Flag clear.
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <RCC_Config+0xa8>)
 8000638:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800063c:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate();
 800063e:	f000 f9c9 	bl	80009d4 <SystemCoreClockUpdate>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <GPIO_Config>:
void GPIO_Config(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x9; 				//->Clock of GPIOA and GPIOD = Enabled
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <GPIO_Config+0x68>)
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <GPIO_Config+0x68>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f043 0309 	orr.w	r3, r3, #9
 800065a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= 0x3;                //->A0 = Analog Input.
 800065c:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <GPIO_Config+0x6c>)
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <GPIO_Config+0x6c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f043 0303 	orr.w	r3, r3, #3
 8000666:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER |= 0x1;       		//->A0 = Open Drain.
 8000668:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <GPIO_Config+0x6c>)
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <GPIO_Config+0x6c>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 0x3;   			//->A0 = Very High speed.
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <GPIO_Config+0x6c>)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <GPIO_Config+0x6c>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f043 0303 	orr.w	r3, r3, #3
 800067e:	6093      	str	r3, [r2, #8]

	GPIOD->MODER |= (0x55 << 24);       //->D12, D13, D14, D15 = Output.
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <GPIO_Config+0x70>)
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <GPIO_Config+0x70>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800068a:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER |= 0x00;              //->D12, D13, D14, D15 = Push-Pull.
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <GPIO_Config+0x70>)
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <GPIO_Config+0x70>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	6053      	str	r3, [r2, #4]
	GPIOD->PUPDR |= 0x00;               //->D12, D13, D14, D15 = No-Pull.
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <GPIO_Config+0x70>)
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <GPIO_Config+0x70>)
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	60d3      	str	r3, [r2, #12]
	GPIOD->OSPEEDR |= (0xff << 24);     //->D12, D13, D14, D15 = Very Speed.
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <GPIO_Config+0x70>)
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <GPIO_Config+0x70>)
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80006a6:	6093      	str	r3, [r2, #8]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020c00 	.word	0x40020c00

080006c0 <ADC_Config>:
void ADC_Config()
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	//Clock
	RCC->APB2ENR |= (1<<8);             //->Clock of ADC1 = Enabled
 80006c4:	4a11      	ldr	r2, [pc, #68]	; (800070c <ADC_Config+0x4c>)
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <ADC_Config+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ce:	6453      	str	r3, [r2, #68]	; 0x44
	ADC->CCR |= (1 << 16);              //->PCLK2 = 4div (84Mhz/4 = 21Mhz) ("21Mhz<30Mhz" must meet the requirement)
 80006d0:	4a0f      	ldr	r2, [pc, #60]	; (8000710 <ADC_Config+0x50>)
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <ADC_Config+0x50>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006da:	6053      	str	r3, [r2, #4]

	//ADC1
	ADC1->CR1 |= (2 << 24);             //->Resolution = 8 bit
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <ADC_Config+0x54>)
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <ADC_Config+0x54>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e6:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1 << 0);              //->ADC = Enabled
 80006e8:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <ADC_Config+0x54>)
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <ADC_Config+0x54>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2 |= (3 << 0);            //->The Channel0 of Sample Cycle = 56 cycles
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <ADC_Config+0x54>)
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <ADC_Config+0x54>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	f043 0303 	orr.w	r3, r3, #3
 80006fe:	6113      	str	r3, [r2, #16]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40012300 	.word	0x40012300
 8000714:	40012000 	.word	0x40012000

08000718 <Read_ADC>:
uint8_t Read_ADC()
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
	uint8_t value;

	ADC1->CR2 |= (1<<30);              	//->Start Conversion
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <Read_ADC+0x34>)
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <Read_ADC+0x34>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000728:	6093      	str	r3, [r2, #8]

	while(!(ADC1->SR & 0x2));           //->Wait Flag of End of conversion
 800072a:	bf00      	nop
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <Read_ADC+0x34>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0f9      	beq.n	800072c <Read_ADC+0x14>

	value = ADC1->DR;                   //->Read value
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <Read_ADC+0x34>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	71fb      	strb	r3, [r7, #7]

	return value;
 800073e:	79fb      	ldrb	r3, [r7, #7]
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40012000 	.word	0x40012000

08000750 <main>:
void delay(uint32_t time)
{
	while(--time);
}
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	RCC_Config();
 8000754:	f7ff ff24 	bl	80005a0 <RCC_Config>
	GPIO_Config();
 8000758:	f7ff ff78 	bl	800064c <GPIO_Config>
	ADC_Config();
 800075c:	f7ff ffb0 	bl	80006c0 <ADC_Config>
	while (1)
	{
		adc_value = Read_ADC();
 8000760:	f7ff ffda 	bl	8000718 <Read_ADC>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b47      	ldr	r3, [pc, #284]	; (8000888 <main+0x138>)
 800076a:	701a      	strb	r2, [r3, #0]
		if(adc_value <= 50)
 800076c:	4b46      	ldr	r3, [pc, #280]	; (8000888 <main+0x138>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b32      	cmp	r3, #50	; 0x32
 8000772:	d818      	bhi.n	80007a6 <main+0x56>
		{
			GPIOD->ODR &= ~(1 << 12);
 8000774:	4a45      	ldr	r2, [pc, #276]	; (800088c <main+0x13c>)
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <main+0x13c>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800077e:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 13);
 8000780:	4a42      	ldr	r2, [pc, #264]	; (800088c <main+0x13c>)
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <main+0x13c>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800078a:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 14);
 800078c:	4a3f      	ldr	r2, [pc, #252]	; (800088c <main+0x13c>)
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <main+0x13c>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000796:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 15);
 8000798:	4a3c      	ldr	r2, [pc, #240]	; (800088c <main+0x13c>)
 800079a:	4b3c      	ldr	r3, [pc, #240]	; (800088c <main+0x13c>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007a2:	6153      	str	r3, [r2, #20]
 80007a4:	e7dc      	b.n	8000760 <main+0x10>
		}
		else if(adc_value <= 100)
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <main+0x138>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b64      	cmp	r3, #100	; 0x64
 80007ac:	d818      	bhi.n	80007e0 <main+0x90>
		{
			GPIOD->ODR |= (1 << 12);
 80007ae:	4a37      	ldr	r2, [pc, #220]	; (800088c <main+0x13c>)
 80007b0:	4b36      	ldr	r3, [pc, #216]	; (800088c <main+0x13c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b8:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 13);
 80007ba:	4a34      	ldr	r2, [pc, #208]	; (800088c <main+0x13c>)
 80007bc:	4b33      	ldr	r3, [pc, #204]	; (800088c <main+0x13c>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007c4:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 14);
 80007c6:	4a31      	ldr	r2, [pc, #196]	; (800088c <main+0x13c>)
 80007c8:	4b30      	ldr	r3, [pc, #192]	; (800088c <main+0x13c>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007d0:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 15);
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <main+0x13c>)
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <main+0x13c>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	e7bf      	b.n	8000760 <main+0x10>
		}
		else if(adc_value <= 150)
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <main+0x138>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b96      	cmp	r3, #150	; 0x96
 80007e6:	d818      	bhi.n	800081a <main+0xca>
		{
			GPIOD->ODR |= (1 << 12);
 80007e8:	4a28      	ldr	r2, [pc, #160]	; (800088c <main+0x13c>)
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <main+0x13c>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f2:	6153      	str	r3, [r2, #20]
			GPIOD->ODR |= (1 << 13);
 80007f4:	4a25      	ldr	r2, [pc, #148]	; (800088c <main+0x13c>)
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <main+0x13c>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fe:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 14);
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <main+0x13c>)
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <main+0x13c>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800080a:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 15);
 800080c:	4a1f      	ldr	r2, [pc, #124]	; (800088c <main+0x13c>)
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <main+0x13c>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000816:	6153      	str	r3, [r2, #20]
 8000818:	e7a2      	b.n	8000760 <main+0x10>
		}
		else if(adc_value <= 200)
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <main+0x138>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2bc8      	cmp	r3, #200	; 0xc8
 8000820:	d818      	bhi.n	8000854 <main+0x104>
		{
			GPIOD->ODR |= (1 << 12);
 8000822:	4a1a      	ldr	r2, [pc, #104]	; (800088c <main+0x13c>)
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <main+0x13c>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	6153      	str	r3, [r2, #20]
			GPIOD->ODR |= (1 << 13);
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <main+0x13c>)
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <main+0x13c>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000838:	6153      	str	r3, [r2, #20]
			GPIOD->ODR |= (1 << 14);
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <main+0x13c>)
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <main+0x13c>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6153      	str	r3, [r2, #20]
			GPIOD->ODR &= ~(1 << 15);
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <main+0x13c>)
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <main+0x13c>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	e785      	b.n	8000760 <main+0x10>
		}
		else
		{
			GPIOD->ODR |= (1 << 12);
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <main+0x13c>)
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <main+0x13c>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800085e:	6153      	str	r3, [r2, #20]
			GPIOD->ODR |= (1 << 13);
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <main+0x13c>)
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <main+0x13c>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800086a:	6153      	str	r3, [r2, #20]
			GPIOD->ODR |= (1 << 14);
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <main+0x13c>)
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <main+0x13c>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6153      	str	r3, [r2, #20]
			GPIOD->ODR |= (1 << 15);
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <main+0x13c>)
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <main+0x13c>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000882:	6153      	str	r3, [r2, #20]
		adc_value = Read_ADC();
 8000884:	e76c      	b.n	8000760 <main+0x10>
 8000886:	bf00      	nop
 8000888:	200000bc 	.word	0x200000bc
 800088c:	40020c00 	.word	0x40020c00

08000890 <EVAL_AUDIO_TransferComplete_CallBack>:




void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  return;
 800089a:	bf00      	nop
}
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <EVAL_AUDIO_GetSampleCallBack>:
uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  return -1;
 80008aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
  ldr  r2, =_sbss
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008d8:	f842 3b04 	str.w	r3, [r2], #4

080008dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008e2:	f000 f841 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e6:	f000 f96d 	bl	8000bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ea:	f7ff ff31 	bl	8000750 <main>
  bx  lr    
 80008ee:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008f4:	08000c2c 	.word	0x08000c2c
  ldr  r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008fc:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000900:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000904:	200000c0 	.word	0x200000c0

08000908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC_IRQHandler>

0800090a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800091c:	e7fe      	b.n	800091c <HardFault_Handler+0x4>

0800091e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000922:	e7fe      	b.n	8000922 <MemManage_Handler+0x4>

08000924 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000928:	e7fe      	b.n	8000928 <BusFault_Handler+0x4>

0800092a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800092e:	e7fe      	b.n	800092e <UsageFault_Handler+0x4>

08000930 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <SystemInit+0x60>)
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <SystemInit+0x60>)
 8000970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <SystemInit+0x64>)
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <SystemInit+0x64>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <SystemInit+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <SystemInit+0x64>)
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <SystemInit+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <SystemInit+0x64>)
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <SystemInit+0x68>)
 80009a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <SystemInit+0x64>)
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <SystemInit+0x64>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80009b6:	f000 f889 	bl	8000acc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <SystemInit+0x60>)
 80009bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c0:	609a      	str	r2, [r3, #8]
#endif
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	40023800 	.word	0x40023800
 80009d0:	24003010 	.word	0x24003010

080009d4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	2302      	movs	r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <SystemCoreClockUpdate+0xe4>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f003 030c 	and.w	r3, r3, #12
 80009f6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d007      	beq.n	8000a0e <SystemCoreClockUpdate+0x3a>
 80009fe:	2b08      	cmp	r3, #8
 8000a00:	d009      	beq.n	8000a16 <SystemCoreClockUpdate+0x42>
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d13d      	bne.n	8000a82 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <SystemCoreClockUpdate+0xe8>)
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a0a:	601a      	str	r2, [r3, #0]
      break;
 8000a0c:	e03d      	b.n	8000a8a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <SystemCoreClockUpdate+0xe8>)
 8000a10:	4a2c      	ldr	r2, [pc, #176]	; (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000a12:	601a      	str	r2, [r3, #0]
      break;
 8000a14:	e039      	b.n	8000a8a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <SystemCoreClockUpdate+0xe4>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	0d9b      	lsrs	r3, r3, #22
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <SystemCoreClockUpdate+0xe4>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a2a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00c      	beq.n	8000a4c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a32:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <SystemCoreClockUpdate+0xf0>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <SystemCoreClockUpdate+0xe4>)
 8000a3c:	6852      	ldr	r2, [r2, #4]
 8000a3e:	0992      	lsrs	r2, r2, #6
 8000a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e00b      	b.n	8000a64 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a54:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <SystemCoreClockUpdate+0xe4>)
 8000a56:	6852      	ldr	r2, [r2, #4]
 8000a58:	0992      	lsrs	r2, r2, #6
 8000a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a5e:	fb02 f303 	mul.w	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <SystemCoreClockUpdate+0xe4>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	3301      	adds	r3, #1
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <SystemCoreClockUpdate+0xe8>)
 8000a7e:	6013      	str	r3, [r2, #0]
      break;
 8000a80:	e003      	b.n	8000a8a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <SystemCoreClockUpdate+0xe8>)
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <SystemCoreClockUpdate+0xec>)
 8000a86:	601a      	str	r2, [r3, #0]
      break;
 8000a88:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <SystemCoreClockUpdate+0xe4>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	f003 030f 	and.w	r3, r3, #15
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <SystemCoreClockUpdate+0xf4>)
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <SystemCoreClockUpdate+0xe8>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemCoreClockUpdate+0xe8>)
 8000aa8:	6013      	str	r3, [r2, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	00f42400 	.word	0x00f42400
 8000ac4:	007a1200 	.word	0x007a1200
 8000ac8:	20000014 	.word	0x20000014

08000acc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ada:	4a36      	ldr	r2, [pc, #216]	; (8000bb4 <SetSysClock+0xe8>)
 8000adc:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <SetSysClock+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ae6:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <SetSysClock+0xe8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <SetSysClock+0x38>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b02:	d1f0      	bne.n	8000ae6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <SetSysClock+0xe8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b10:	2301      	movs	r3, #1
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	e001      	b.n	8000b1a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d142      	bne.n	8000ba6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b20:	4a24      	ldr	r2, [pc, #144]	; (8000bb4 <SetSysClock+0xe8>)
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <SetSysClock+0xe8>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000b2c:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <SetSysClock+0xec>)
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <SetSysClock+0xec>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b36:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <SetSysClock+0xe8>)
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <SetSysClock+0xe8>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <SetSysClock+0xe8>)
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <SetSysClock+0xe8>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <SetSysClock+0xe8>)
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <SetSysClock+0xe8>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000b56:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <SetSysClock+0xe8>)
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <SetSysClock+0xf0>)
 8000b5c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b5e:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <SetSysClock+0xe8>)
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <SetSysClock+0xe8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b68:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b6a:	bf00      	nop
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <SetSysClock+0xe8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f9      	beq.n	8000b6c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <SetSysClock+0xf4>)
 8000b7a:	f240 6205 	movw	r2, #1541	; 0x605
 8000b7e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <SetSysClock+0xe8>)
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <SetSysClock+0xe8>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f023 0303 	bic.w	r3, r3, #3
 8000b8a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <SetSysClock+0xe8>)
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <SetSysClock+0xe8>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b98:	bf00      	nop
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SetSysClock+0xe8>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d1f9      	bne.n	8000b9a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	07405408 	.word	0x07405408
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <__libc_init_array>:
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	4e0d      	ldr	r6, [pc, #52]	; (8000bfc <__libc_init_array+0x38>)
 8000bc8:	4c0d      	ldr	r4, [pc, #52]	; (8000c00 <__libc_init_array+0x3c>)
 8000bca:	1ba4      	subs	r4, r4, r6
 8000bcc:	10a4      	asrs	r4, r4, #2
 8000bce:	2500      	movs	r5, #0
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	d109      	bne.n	8000be8 <__libc_init_array+0x24>
 8000bd4:	4e0b      	ldr	r6, [pc, #44]	; (8000c04 <__libc_init_array+0x40>)
 8000bd6:	4c0c      	ldr	r4, [pc, #48]	; (8000c08 <__libc_init_array+0x44>)
 8000bd8:	f000 f818 	bl	8000c0c <_init>
 8000bdc:	1ba4      	subs	r4, r4, r6
 8000bde:	10a4      	asrs	r4, r4, #2
 8000be0:	2500      	movs	r5, #0
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d105      	bne.n	8000bf2 <__libc_init_array+0x2e>
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bec:	4798      	blx	r3
 8000bee:	3501      	adds	r5, #1
 8000bf0:	e7ee      	b.n	8000bd0 <__libc_init_array+0xc>
 8000bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf6:	4798      	blx	r3
 8000bf8:	3501      	adds	r5, #1
 8000bfa:	e7f2      	b.n	8000be2 <__libc_init_array+0x1e>
 8000bfc:	08000c24 	.word	0x08000c24
 8000c00:	08000c24 	.word	0x08000c24
 8000c04:	08000c24 	.word	0x08000c24
 8000c08:	08000c28 	.word	0x08000c28

08000c0c <_init>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr

08000c18 <_fini>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	bf00      	nop
 8000c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1e:	bc08      	pop	{r3}
 8000c20:	469e      	mov	lr, r3
 8000c22:	4770      	bx	lr
