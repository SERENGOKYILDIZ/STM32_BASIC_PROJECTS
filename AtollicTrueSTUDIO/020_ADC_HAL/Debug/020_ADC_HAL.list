
020_ADC_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002654  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080027fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000070  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000007c  2000007c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000051be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001048  00000000  00000000  000251fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004f8  00000000  00000000  00026248  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000460  00000000  00000000  00026740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002395  00000000  00000000  00026ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001d5a  00000000  00000000  00028f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002ac8f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000013d0  00000000  00000000  0002ad0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027c4 	.word	0x080027c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080027c4 	.word	0x080027c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b97a 	b.w	8000d08 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	468c      	mov	ip, r1
 8000a32:	460d      	mov	r5, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	9e08      	ldr	r6, [sp, #32]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d151      	bne.n	8000ae0 <__udivmoddi4+0xb4>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4617      	mov	r7, r2
 8000a40:	d96d      	bls.n	8000b1e <__udivmoddi4+0xf2>
 8000a42:	fab2 fe82 	clz	lr, r2
 8000a46:	f1be 0f00 	cmp.w	lr, #0
 8000a4a:	d00b      	beq.n	8000a64 <__udivmoddi4+0x38>
 8000a4c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a50:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a58:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a5c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a60:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a68:	0c25      	lsrs	r5, r4, #16
 8000a6a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a6e:	fa1f f987 	uxth.w	r9, r7
 8000a72:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a7a:	fb08 f309 	mul.w	r3, r8, r9
 8000a7e:	42ab      	cmp	r3, r5
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x6c>
 8000a82:	19ed      	adds	r5, r5, r7
 8000a84:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a88:	f080 8123 	bcs.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a8c:	42ab      	cmp	r3, r5
 8000a8e:	f240 8120 	bls.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a92:	f1a8 0802 	sub.w	r8, r8, #2
 8000a96:	443d      	add	r5, r7
 8000a98:	1aed      	subs	r5, r5, r3
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000aa0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aa4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa8:	fb00 f909 	mul.w	r9, r0, r9
 8000aac:	45a1      	cmp	r9, r4
 8000aae:	d909      	bls.n	8000ac4 <__udivmoddi4+0x98>
 8000ab0:	19e4      	adds	r4, r4, r7
 8000ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab6:	f080 810a 	bcs.w	8000cce <__udivmoddi4+0x2a2>
 8000aba:	45a1      	cmp	r9, r4
 8000abc:	f240 8107 	bls.w	8000cce <__udivmoddi4+0x2a2>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	eba4 0409 	sub.w	r4, r4, r9
 8000ac8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d061      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000ad2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	6034      	str	r4, [r6, #0]
 8000ada:	6073      	str	r3, [r6, #4]
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0xc8>
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d054      	beq.n	8000b92 <__udivmoddi4+0x166>
 8000ae8:	2100      	movs	r1, #0
 8000aea:	e886 0021 	stmia.w	r6, {r0, r5}
 8000aee:	4608      	mov	r0, r1
 8000af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af4:	fab3 f183 	clz	r1, r3
 8000af8:	2900      	cmp	r1, #0
 8000afa:	f040 808e 	bne.w	8000c1a <__udivmoddi4+0x1ee>
 8000afe:	42ab      	cmp	r3, r5
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xdc>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80fa 	bhi.w	8000cfc <__udivmoddi4+0x2d0>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb65 0503 	sbc.w	r5, r5, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	46ac      	mov	ip, r5
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d03f      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000b16:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	b912      	cbnz	r2, 8000b26 <__udivmoddi4+0xfa>
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b26:	fab7 fe87 	clz	lr, r7
 8000b2a:	f1be 0f00 	cmp.w	lr, #0
 8000b2e:	d134      	bne.n	8000b9a <__udivmoddi4+0x16e>
 8000b30:	1beb      	subs	r3, r5, r7
 8000b32:	0c3a      	lsrs	r2, r7, #16
 8000b34:	fa1f fc87 	uxth.w	ip, r7
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b3e:	0c25      	lsrs	r5, r4, #16
 8000b40:	fb02 3318 	mls	r3, r2, r8, r3
 8000b44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b48:	fb0c f308 	mul.w	r3, ip, r8
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x134>
 8000b50:	19ed      	adds	r5, r5, r7
 8000b52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x132>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	f200 80d1 	bhi.w	8000d00 <__udivmoddi4+0x2d4>
 8000b5e:	4680      	mov	r8, r0
 8000b60:	1aed      	subs	r5, r5, r3
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b68:	fb02 5510 	mls	r5, r2, r0, r5
 8000b6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b70:	fb0c fc00 	mul.w	ip, ip, r0
 8000b74:	45a4      	cmp	ip, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x15c>
 8000b78:	19e4      	adds	r4, r4, r7
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x15a>
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	f200 80b8 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 040c 	sub.w	r4, r4, ip
 8000b8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b90:	e79d      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b92:	4631      	mov	r1, r6
 8000b94:	4630      	mov	r0, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	f1ce 0420 	rsb	r4, lr, #32
 8000b9e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ba2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ba6:	fa20 f804 	lsr.w	r8, r0, r4
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa25 f404 	lsr.w	r4, r5, r4
 8000bb0:	ea48 0803 	orr.w	r8, r8, r3
 8000bb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bbc:	fb02 4411 	mls	r4, r2, r1, r4
 8000bc0:	fa1f fc87 	uxth.w	ip, r7
 8000bc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bc8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bcc:	42ab      	cmp	r3, r5
 8000bce:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x1bc>
 8000bd4:	19ed      	adds	r5, r5, r7
 8000bd6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bda:	f080 808a 	bcs.w	8000cf2 <__udivmoddi4+0x2c6>
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	f240 8087 	bls.w	8000cf2 <__udivmoddi4+0x2c6>
 8000be4:	3902      	subs	r1, #2
 8000be6:	443d      	add	r5, r7
 8000be8:	1aeb      	subs	r3, r5, r3
 8000bea:	fa1f f588 	uxth.w	r5, r8
 8000bee:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bf2:	fb02 3310 	mls	r3, r2, r0, r3
 8000bf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bfa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x1e6>
 8000c02:	19ed      	adds	r5, r5, r7
 8000c04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c08:	d26f      	bcs.n	8000cea <__udivmoddi4+0x2be>
 8000c0a:	42ab      	cmp	r3, r5
 8000c0c:	d96d      	bls.n	8000cea <__udivmoddi4+0x2be>
 8000c0e:	3802      	subs	r0, #2
 8000c10:	443d      	add	r5, r7
 8000c12:	1aeb      	subs	r3, r5, r3
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	e78f      	b.n	8000b3a <__udivmoddi4+0x10e>
 8000c1a:	f1c1 0720 	rsb	r7, r1, #32
 8000c1e:	fa22 f807 	lsr.w	r8, r2, r7
 8000c22:	408b      	lsls	r3, r1
 8000c24:	fa05 f401 	lsl.w	r4, r5, r1
 8000c28:	ea48 0303 	orr.w	r3, r8, r3
 8000c2c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c3a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c42:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c46:	fa1f f883 	uxth.w	r8, r3
 8000c4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c4e:	fb09 f408 	mul.w	r4, r9, r8
 8000c52:	42ac      	cmp	r4, r5
 8000c54:	fa02 f201 	lsl.w	r2, r2, r1
 8000c58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x244>
 8000c5e:	18ed      	adds	r5, r5, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	d243      	bcs.n	8000cee <__udivmoddi4+0x2c2>
 8000c66:	42ac      	cmp	r4, r5
 8000c68:	d941      	bls.n	8000cee <__udivmoddi4+0x2c2>
 8000c6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6e:	441d      	add	r5, r3
 8000c70:	1b2d      	subs	r5, r5, r4
 8000c72:	fa1f fe8e 	uxth.w	lr, lr
 8000c76:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c7a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c82:	fb00 f808 	mul.w	r8, r0, r8
 8000c86:	45a0      	cmp	r8, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x26e>
 8000c8a:	18e4      	adds	r4, r4, r3
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d229      	bcs.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c92:	45a0      	cmp	r8, r4
 8000c94:	d927      	bls.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c96:	3802      	subs	r0, #2
 8000c98:	441c      	add	r4, r3
 8000c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9e:	eba4 0408 	sub.w	r4, r4, r8
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	454c      	cmp	r4, r9
 8000ca8:	46c6      	mov	lr, r8
 8000caa:	464d      	mov	r5, r9
 8000cac:	d315      	bcc.n	8000cda <__udivmoddi4+0x2ae>
 8000cae:	d012      	beq.n	8000cd6 <__udivmoddi4+0x2aa>
 8000cb0:	b156      	cbz	r6, 8000cc8 <__udivmoddi4+0x29c>
 8000cb2:	ebba 030e 	subs.w	r3, sl, lr
 8000cb6:	eb64 0405 	sbc.w	r4, r4, r5
 8000cba:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	6037      	str	r7, [r6, #0]
 8000cc6:	6074      	str	r4, [r6, #4]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e6f8      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	e6e0      	b.n	8000a98 <__udivmoddi4+0x6c>
 8000cd6:	45c2      	cmp	sl, r8
 8000cd8:	d2ea      	bcs.n	8000cb0 <__udivmoddi4+0x284>
 8000cda:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cde:	eb69 0503 	sbc.w	r5, r9, r3
 8000ce2:	3801      	subs	r0, #1
 8000ce4:	e7e4      	b.n	8000cb0 <__udivmoddi4+0x284>
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	e7d7      	b.n	8000c9a <__udivmoddi4+0x26e>
 8000cea:	4640      	mov	r0, r8
 8000cec:	e791      	b.n	8000c12 <__udivmoddi4+0x1e6>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e7be      	b.n	8000c70 <__udivmoddi4+0x244>
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	e778      	b.n	8000be8 <__udivmoddi4+0x1bc>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	e745      	b.n	8000b88 <__udivmoddi4+0x15c>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e708      	b.n	8000b12 <__udivmoddi4+0xe6>
 8000d00:	f1a8 0802 	sub.w	r8, r8, #2
 8000d04:	443d      	add	r5, r7
 8000d06:	e72b      	b.n	8000b60 <__udivmoddi4+0x134>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <Read_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Read_ADC()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint16_t value;

	HAL_ADC_Start(&hadc1);
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <Read_ADC+0x40>)
 8000d14:	f000 fa8e 	bl	8001234 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <Read_ADC+0x40>)
 8000d1e:	f000 fb8e 	bl	800143e <HAL_ADC_PollForConversion>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d105      	bne.n	8000d34 <Read_ADC+0x28>
		value = HAL_ADC_GetValue(&hadc1);
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <Read_ADC+0x40>)
 8000d2a:	f000 fc13 	bl	8001554 <HAL_ADC_GetValue>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
 8000d32:	e002      	b.n	8000d3a <Read_ADC+0x2e>
	else
		value = -1;
 8000d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d38:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <Read_ADC+0x40>)
 8000d3c:	f000 fb4c 	bl	80013d8 <HAL_ADC_Stop>

	return value;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000002c 	.word	0x2000002c

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b598      	push	{r3, r4, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d54:	f000 f9b8 	bl	80010c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d58:	f000 f826 	bl	8000da8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d5c:	f000 f8e0 	bl	8000f20 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d60:	f000 f88c 	bl	8000e7c <MX_ADC1_Init>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
	/* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */
		adc_value = Read_ADC();
 8000d64:	f7ff ffd2 	bl	8000d0c <Read_ADC>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <main+0x50>)
 8000d6e:	801a      	strh	r2, [r3, #0]
		adc_voltage = (0.00080586081) * adc_value;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <main+0x50>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb79 	bl	800046c <__aeabi_i2d>
 8000d7a:	a307      	add	r3, pc, #28	; (adr r3, 8000d98 <main+0x48>)
 8000d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d80:	f7ff fbda 	bl	8000538 <__aeabi_dmul>
 8000d84:	4603      	mov	r3, r0
 8000d86:	460c      	mov	r4, r1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	f7ff fde6 	bl	800095c <__aeabi_d2f>
 8000d90:	4602      	mov	r2, r0
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <main+0x54>)
 8000d94:	601a      	str	r2, [r3, #0]
		adc_value = Read_ADC();
 8000d96:	e7e5      	b.n	8000d64 <main+0x14>
 8000d98:	e97b63e3 	.word	0xe97b63e3
 8000d9c:	3f4a680c 	.word	0x3f4a680c
 8000da0:	20000028 	.word	0x20000028
 8000da4:	20000074 	.word	0x20000074

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	; 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	2230      	movs	r2, #48	; 0x30
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 fcfc 	bl	80027b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <SystemClock_Config+0xcc>)
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <SystemClock_Config+0xcc>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <SystemClock_Config+0xcc>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <SystemClock_Config+0xd0>)
 8000dee:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <SystemClock_Config+0xd0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <SystemClock_Config+0xd0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e1c:	23a8      	movs	r3, #168	; 0xa8
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e24:	2307      	movs	r3, #7
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 0320 	add.w	r3, r7, #32
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 f83d 	bl	8001eac <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e38:	f000 f89a 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2105      	movs	r1, #5
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fa9e 	bl	800239c <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e66:	f000 f883 	bl	8000f70 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3750      	adds	r7, #80	; 0x50
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <MX_ADC1_Init+0x9c>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <MX_ADC1_Init+0xa0>)
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000ede:	f000 f965 	bl	80011ac <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee8:	f000 f842 	bl	8000f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_ADC1_Init+0x98>)
 8000efe:	f000 fb37 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 f832 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000002c 	.word	0x2000002c
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	0f000001 	.word	0x0f000001

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <Error_Handler+0x6>

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb6:	2007      	movs	r0, #7
 8000fb8:	f000 fdaa 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_ADC_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d127      	bne.n	800103a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8000ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <HAL_ADC_MspInit+0x80>)
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_ADC_MspInit+0x80>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_ADC_MspInit+0x84>)
 8001036:	f000 fd9f 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40012000 	.word	0x40012000
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f866 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <SystemInit+0x20>)
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SystemInit+0x20>)
 80010ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 fd0d 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff ff3c 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fd17 	bl	8001b5e <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 fced 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000078 	.word	0x20000078

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000078 	.word	0x20000078

080011ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e033      	b.n	800122a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fefc 	bl	8000fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d118      	bne.n	800121c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011f2:	f023 0302 	bic.w	r3, r3, #2
 80011f6:	f043 0202 	orr.w	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fada 	bl	80017b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f023 0303 	bic.w	r3, r3, #3
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
 800121a:	e001      	b.n	8001220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001246:	2b01      	cmp	r3, #1
 8001248:	d101      	bne.n	800124e <HAL_ADC_Start+0x1a>
 800124a:	2302      	movs	r3, #2
 800124c:	e0b2      	b.n	80013b4 <HAL_ADC_Start+0x180>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b01      	cmp	r3, #1
 8001262:	d018      	beq.n	8001296 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	6892      	ldr	r2, [r2, #8]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001274:	4b52      	ldr	r3, [pc, #328]	; (80013c0 <HAL_ADC_Start+0x18c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <HAL_ADC_Start+0x190>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9a      	lsrs	r2, r3, #18
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001288:	e002      	b.n	8001290 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3b01      	subs	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f9      	bne.n	800128a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d17a      	bne.n	800139a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012e2:	d106      	bne.n	80012f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	f023 0206 	bic.w	r2, r3, #6
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	645a      	str	r2, [r3, #68]	; 0x44
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <HAL_ADC_Start+0x194>)
 8001302:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800130c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	2b00      	cmp	r3, #0
 8001318:	d12a      	bne.n	8001370 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <HAL_ADC_Start+0x198>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d015      	beq.n	8001350 <HAL_ADC_Start+0x11c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <HAL_ADC_Start+0x19c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d105      	bne.n	800133a <HAL_ADC_Start+0x106>
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_ADC_Start+0x194>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <HAL_ADC_Start+0x1a0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d136      	bne.n	80013b2 <HAL_ADC_Start+0x17e>
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_ADC_Start+0x194>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d830      	bhi.n	80013b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d129      	bne.n	80013b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	6892      	ldr	r2, [r2, #8]
 8001368:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	e020      	b.n	80013b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a15      	ldr	r2, [pc, #84]	; (80013cc <HAL_ADC_Start+0x198>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d11b      	bne.n	80013b2 <HAL_ADC_Start+0x17e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d114      	bne.n	80013b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	6892      	ldr	r2, [r2, #8]
 8001392:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	e00b      	b.n	80013b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f043 0210 	orr.w	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f043 0201 	orr.w	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20000000 	.word	0x20000000
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	40012300 	.word	0x40012300
 80013cc:	40012000 	.word	0x40012000
 80013d0:	40012100 	.word	0x40012100
 80013d4:	40012200 	.word	0x40012200

080013d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Stop+0x16>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e021      	b.n	8001432 <HAL_ADC_Stop+0x5a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	6892      	ldr	r2, [r2, #8]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d113      	bne.n	8001484 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146a:	d10b      	bne.n	8001484 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e063      	b.n	800154c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001484:	f7ff fe86 	bl	8001194 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800148a:	e021      	b.n	80014d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d01d      	beq.n	80014d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_ADC_PollForConversion+0x6c>
 800149a:	f7ff fe7b 	bl	8001194 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad2      	subs	r2, r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d912      	bls.n	80014d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d00b      	beq.n	80014d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 0204 	orr.w	r2, r3, #4
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e03d      	b.n	800154c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d1d6      	bne.n	800148c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f06f 0212 	mvn.w	r2, #18
 80014e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d123      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	d11f      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	d111      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001570:	b490      	push	{r4, r7}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1c>
 8001588:	2302      	movs	r3, #2
 800158a:	e107      	b.n	800179c <HAL_ADC_ConfigChannel+0x22c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d926      	bls.n	80015ea <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68d9      	ldr	r1, [r3, #12]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4403      	add	r3, r0
 80015b4:	3b1e      	subs	r3, #30
 80015b6:	2007      	movs	r0, #7
 80015b8:	fa00 f303 	lsl.w	r3, r0, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	400b      	ands	r3, r1
 80015c0:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6898      	ldr	r0, [r3, #8]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461c      	mov	r4, r3
 80015d8:	4623      	mov	r3, r4
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4423      	add	r3, r4
 80015de:	3b1e      	subs	r3, #30
 80015e0:	fa00 f303 	lsl.w	r3, r0, r3
 80015e4:	430b      	orrs	r3, r1
 80015e6:	60d3      	str	r3, [r2, #12]
 80015e8:	e023      	b.n	8001632 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6919      	ldr	r1, [r3, #16]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	2007      	movs	r0, #7
 8001604:	fa00 f303 	lsl.w	r3, r0, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	400b      	ands	r3, r1
 800160c:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6919      	ldr	r1, [r3, #16]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6898      	ldr	r0, [r3, #8]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	461c      	mov	r4, r3
 8001624:	4623      	mov	r3, r4
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4423      	add	r3, r4
 800162a:	fa00 f303 	lsl.w	r3, r0, r3
 800162e:	430b      	orrs	r3, r1
 8001630:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d824      	bhi.n	8001684 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6819      	ldr	r1, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	3b05      	subs	r3, #5
 8001650:	221f      	movs	r2, #31
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	4003      	ands	r3, r0
 800165a:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	461c      	mov	r4, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	3b05      	subs	r3, #5
 800167a:	fa04 f303 	lsl.w	r3, r4, r3
 800167e:	4303      	orrs	r3, r0
 8001680:	634b      	str	r3, [r1, #52]	; 0x34
 8001682:	e04c      	b.n	800171e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d824      	bhi.n	80016d6 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b23      	subs	r3, #35	; 0x23
 80016a2:	221f      	movs	r2, #31
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4003      	ands	r3, r0
 80016ac:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	461c      	mov	r4, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b23      	subs	r3, #35	; 0x23
 80016cc:	fa04 f303 	lsl.w	r3, r4, r3
 80016d0:	4303      	orrs	r3, r0
 80016d2:	630b      	str	r3, [r1, #48]	; 0x30
 80016d4:	e023      	b.n	800171e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b41      	subs	r3, #65	; 0x41
 80016ec:	221f      	movs	r2, #31
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4003      	ands	r3, r0
 80016f6:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	461c      	mov	r4, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b41      	subs	r3, #65	; 0x41
 8001716:	fa04 f303 	lsl.w	r3, r4, r3
 800171a:	4303      	orrs	r3, r0
 800171c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_ADC_ConfigChannel+0x238>)
 8001720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a21      	ldr	r2, [pc, #132]	; (80017ac <HAL_ADC_ConfigChannel+0x23c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d109      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d0>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d105      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x1d0>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_ADC_ConfigChannel+0x23c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d123      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x222>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b10      	cmp	r3, #16
 8001750:	d003      	beq.n	800175a <HAL_ADC_ConfigChannel+0x1ea>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b11      	cmp	r3, #17
 8001758:	d11b      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x222>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d111      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_ADC_ConfigChannel+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_ADC_ConfigChannel+0x244>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9a      	lsrs	r2, r3, #18
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001784:	e002      	b.n	800178c <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3b01      	subs	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f9      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc90      	pop	{r4, r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40012300 	.word	0x40012300
 80017ac:	40012000 	.word	0x40012000
 80017b0:	20000000 	.word	0x20000000
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c0:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <ADC_Init+0x1f0>)
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	431a      	orrs	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	6852      	ldr	r2, [r2, #4]
 80017e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	6851      	ldr	r1, [r2, #4]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6912      	ldr	r2, [r2, #16]
 80017fc:	0212      	lsls	r2, r2, #8
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	6852      	ldr	r2, [r2, #4]
 800180c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	6851      	ldr	r1, [r2, #4]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6892      	ldr	r2, [r2, #8]
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	6892      	ldr	r2, [r2, #8]
 800182e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	6891      	ldr	r1, [r2, #8]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68d2      	ldr	r2, [r2, #12]
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	4a58      	ldr	r2, [pc, #352]	; (80019ac <ADC_Init+0x1f4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	6892      	ldr	r2, [r2, #8]
 800185a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800185e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6891      	ldr	r1, [r2, #8]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800186e:	430a      	orrs	r2, r1
 8001870:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	6892      	ldr	r2, [r2, #8]
 800187c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	6891      	ldr	r1, [r2, #8]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	e00f      	b.n	80018b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	6892      	ldr	r2, [r2, #8]
 80018a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	6892      	ldr	r2, [r2, #8]
 80018b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	6892      	ldr	r2, [r2, #8]
 80018c0:	f022 0202 	bic.w	r2, r2, #2
 80018c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	6891      	ldr	r1, [r2, #8]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	7e12      	ldrb	r2, [r2, #24]
 80018d4:	0052      	lsls	r2, r2, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01b      	beq.n	800191c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	6852      	ldr	r2, [r2, #4]
 80018ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	6852      	ldr	r2, [r2, #4]
 80018fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	6851      	ldr	r1, [r2, #4]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001912:	3a01      	subs	r2, #1
 8001914:	0352      	lsls	r2, r2, #13
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	e007      	b.n	800192c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	6852      	ldr	r2, [r2, #4]
 8001926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	69d2      	ldr	r2, [r2, #28]
 800194a:	3a01      	subs	r2, #1
 800194c:	0512      	lsls	r2, r2, #20
 800194e:	430a      	orrs	r2, r1
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6892      	ldr	r2, [r2, #8]
 800195c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	6891      	ldr	r1, [r2, #8]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001972:	0252      	lsls	r2, r2, #9
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	6892      	ldr	r2, [r2, #8]
 8001982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6891      	ldr	r1, [r2, #8]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6952      	ldr	r2, [r2, #20]
 8001996:	0292      	lsls	r2, r2, #10
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40012300 	.word	0x40012300
 80019ac:	0f000001 	.word	0x0f000001

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	490d      	ldr	r1, [pc, #52]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	4909      	ldr	r1, [pc, #36]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aae:	2101      	movs	r1, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	1e59      	subs	r1, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff90 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff49 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff5e 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff90 	bl	8001a68 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5f 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffb0 	bl	8001acc <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e16b      	b.n	8001e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 815a 	bne.w	8001e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d130      	bne.n	8001c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0201 	and.w	r2, r3, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d017      	beq.n	8001c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80b4 	beq.w	8001e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4a5f      	ldr	r2, [pc, #380]	; (8001e80 <HAL_GPIO_Init+0x308>)
 8001d04:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_GPIO_Init+0x308>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_GPIO_Init+0x308>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1a:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a51      	ldr	r2, [pc, #324]	; (8001e88 <HAL_GPIO_Init+0x310>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02b      	beq.n	8001d9e <HAL_GPIO_Init+0x226>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a50      	ldr	r2, [pc, #320]	; (8001e8c <HAL_GPIO_Init+0x314>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x222>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x318>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x21e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x31c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x21a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x216>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x328>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x20e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x32c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x20a>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e00e      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d82:	2308      	movs	r3, #8
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	4934      	ldr	r1, [pc, #208]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e36:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_GPIO_Init+0x330>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	f67f ae90 	bls.w	8001b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	3724      	adds	r7, #36	; 0x24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40021400 	.word	0x40021400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40021c00 	.word	0x40021c00
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e264      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d075      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	4ba3      	ldr	r3, [pc, #652]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4ba0      	ldr	r3, [pc, #640]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d112      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4b9d      	ldr	r3, [pc, #628]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	4b99      	ldr	r3, [pc, #612]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d05b      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x108>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d157      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e23f      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x74>
 8001f12:	4a91      	ldr	r2, [pc, #580]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	4b90      	ldr	r3, [pc, #576]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x98>
 8001f2a:	4a8b      	ldr	r2, [pc, #556]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	4b8a      	ldr	r3, [pc, #552]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4a88      	ldr	r2, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	4b87      	ldr	r3, [pc, #540]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f44:	4a84      	ldr	r2, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	4b84      	ldr	r3, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4a81      	ldr	r2, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f916 	bl	8001194 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff f912 	bl	8001194 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e204      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xc0>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f902 	bl	8001194 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff f8fe 	bl	8001194 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1f0      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0xe8>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d063      	beq.n	800208a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	4b65      	ldr	r3, [pc, #404]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b62      	ldr	r3, [pc, #392]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d11c      	bne.n	8002014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x152>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e1c4      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4956      	ldr	r1, [pc, #344]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	4b55      	ldr	r3, [pc, #340]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	e03a      	b.n	800208a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCC_OscConfig+0x2b0>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7ff f8b7 	bl	8001194 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202a:	f7ff f8b3 	bl	8001194 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1a5      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4943      	ldr	r1, [pc, #268]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800204a:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205e:	4b3f      	ldr	r3, [pc, #252]	; (800215c <HAL_RCC_OscConfig+0x2b0>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f896 	bl	8001194 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff f892 	bl	8001194 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e184      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d030      	beq.n	80020f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x2b4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff f876 	bl	8001194 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff f872 	bl	8001194 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e164      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x200>
 80020ca:	e015      	b.n	80020f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_OscConfig+0x2b4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7ff f85f 	bl	8001194 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7ff f85b 	bl	8001194 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e14d      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a0 	beq.w	8002246 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_OscConfig+0x2b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d121      	bne.n	8002186 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_RCC_OscConfig+0x2b8>)
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_RCC_OscConfig+0x2b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff f821 	bl	8001194 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e011      	b.n	800217a <HAL_RCC_OscConfig+0x2ce>
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	42470000 	.word	0x42470000
 8002160:	42470e80 	.word	0x42470e80
 8002164:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7ff f814 	bl	8001194 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e106      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_RCC_OscConfig+0x4e4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x2f0>
 800218e:	4a81      	ldr	r2, [pc, #516]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 8002190:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	e01c      	b.n	80021d6 <HAL_RCC_OscConfig+0x32a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x312>
 80021a4:	4a7b      	ldr	r2, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021a6:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	4a78      	ldr	r2, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021b2:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x32a>
 80021be:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021c0:	4b74      	ldr	r3, [pc, #464]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	4a72      	ldr	r2, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021cc:	4b71      	ldr	r3, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7fe ffd9 	bl	8001194 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7fe ffd5 	bl	8001194 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0c5      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCC_OscConfig+0x33a>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7fe ffc3 	bl	8001194 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe ffbf 	bl	8001194 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0af      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4a56      	ldr	r2, [pc, #344]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 800223c:	4b55      	ldr	r3, [pc, #340]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 809b 	beq.w	8002386 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d05c      	beq.n	8002316 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d141      	bne.n	80022e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x4ec>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe ff93 	bl	8001194 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe ff8f 	bl	8001194 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e081      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002290:	4940      	ldr	r1, [pc, #256]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	085b      	lsrs	r3, r3, #1
 80022aa:	3b01      	subs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ba:	4b37      	ldr	r3, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x4ec>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe ff68 	bl	8001194 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe ff64 	bl	8001194 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e056      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x41c>
 80022e6:	e04e      	b.n	8002386 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x4ec>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe ff51 	bl	8001194 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe ff4d 	bl	8001194 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e03f      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x44a>
 8002314:	e037      	b.n	8002386 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e032      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_RCC_OscConfig+0x4e8>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d028      	beq.n	8002382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d121      	bne.n	8002382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d11a      	bne.n	8002382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002358:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800235a:	4293      	cmp	r3, r2
 800235c:	d111      	bne.n	8002382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	3b01      	subs	r3, #1
 800236c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40007000 	.word	0x40007000
 8002394:	40023800 	.word	0x40023800
 8002398:	42470060 	.word	0x42470060

0800239c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0cc      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b68      	ldr	r3, [pc, #416]	; (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0207 	and.w	r2, r3, #7
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d20c      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b65      	ldr	r3, [pc, #404]	; (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b63      	ldr	r3, [pc, #396]	; (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0207 	and.w	r2, r3, #7
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b8      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4b59      	ldr	r3, [pc, #356]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002408:	4a53      	ldr	r2, [pc, #332]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4950      	ldr	r1, [pc, #320]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d044      	beq.n	80024bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d119      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e07f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d003      	beq.n	800245a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	2b03      	cmp	r3, #3
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e067      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4937      	ldr	r1, [pc, #220]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 0203 	bic.w	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7fe fe82 	bl	8001194 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fe7e 	bl	8001194 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e04f      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0207 	and.w	r2, r3, #7
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0207 	and.w	r2, r3, #7
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e032      	b.n	800254a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4919      	ldr	r1, [pc, #100]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250e:	4912      	ldr	r1, [pc, #72]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002522:	f000 f821 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	fa21 f303 	lsr.w	r3, r1, r3
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fde2 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00
 8002558:	40023800 	.word	0x40023800
 800255c:	080027dc 	.word	0x080027dc
 8002560:	20000000 	.word	0x20000000
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	b08f      	sub	sp, #60	; 0x3c
 800256e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002580:	4b62      	ldr	r3, [pc, #392]	; (800270c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b04      	cmp	r3, #4
 800258a:	d007      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x34>
 800258c:	2b08      	cmp	r3, #8
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 80b2 	bne.w	80026fa <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002596:	4b5e      	ldr	r3, [pc, #376]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800259a:	e0b1      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025a0:	e0ae      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a2:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d04e      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b8:	4b54      	ldr	r3, [pc, #336]	; (800270c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	f04f 0400 	mov.w	r4, #0
 80025c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	ea01 0103 	and.w	r1, r1, r3
 80025ce:	ea02 0204 	and.w	r2, r2, r4
 80025d2:	460b      	mov	r3, r1
 80025d4:	4614      	mov	r4, r2
 80025d6:	0160      	lsls	r0, r4, #5
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24
 80025da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025dc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24
 80025e2:	015b      	lsls	r3, r3, #5
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80025ea:	1a5b      	subs	r3, r3, r1
 80025ec:	eb64 0402 	sbc.w	r4, r4, r2
 80025f0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80025f4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80025f8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80025fc:	ebb8 0803 	subs.w	r8, r8, r3
 8002600:	eb69 0904 	sbc.w	r9, r9, r4
 8002604:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800261c:	eb18 0801 	adds.w	r8, r8, r1
 8002620:	eb49 0902 	adc.w	r9, r9, r2
 8002624:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800263c:	4640      	mov	r0, r8
 800263e:	4649      	mov	r1, r9
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	f04f 0400 	mov.w	r4, #0
 8002646:	461a      	mov	r2, r3
 8002648:	4623      	mov	r3, r4
 800264a:	f7fe f9d7 	bl	80009fc <__aeabi_uldivmod>
 800264e:	4603      	mov	r3, r0
 8002650:	460c      	mov	r4, r1
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
 8002654:	e043      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	f04f 0400 	mov.w	r4, #0
 8002660:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	ea01 0103 	and.w	r1, r1, r3
 800266c:	ea02 0204 	and.w	r2, r2, r4
 8002670:	460b      	mov	r3, r1
 8002672:	4614      	mov	r4, r2
 8002674:	0160      	lsls	r0, r4, #5
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	015b      	lsls	r3, r3, #5
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002688:	1a5b      	subs	r3, r3, r1
 800268a:	eb64 0402 	sbc.w	r4, r4, r2
 800268e:	01a6      	lsls	r6, r4, #6
 8002690:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002694:	019d      	lsls	r5, r3, #6
 8002696:	1aed      	subs	r5, r5, r3
 8002698:	eb66 0604 	sbc.w	r6, r6, r4
 800269c:	00f3      	lsls	r3, r6, #3
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	00eb      	lsls	r3, r5, #3
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	e897 0060 	ldmia.w	r7, {r5, r6}
 80026b0:	186d      	adds	r5, r5, r1
 80026b2:	eb46 0602 	adc.w	r6, r6, r2
 80026b6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80026ba:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80026be:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80026c2:	4655      	mov	r5, sl
 80026c4:	465e      	mov	r6, fp
 80026c6:	4628      	mov	r0, r5
 80026c8:	4631      	mov	r1, r6
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	f04f 0400 	mov.w	r4, #0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	f7fe f992 	bl	80009fc <__aeabi_uldivmod>
 80026d8:	4603      	mov	r3, r0
 80026da:	460c      	mov	r4, r1
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80026ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026f8:	e002      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002702:	4618      	mov	r0, r3
 8002704:	373c      	adds	r7, #60	; 0x3c
 8002706:	46bd      	mov	sp, r7
 8002708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200

08002718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800271e:	490e      	ldr	r1, [pc, #56]	; (8002758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002734:	4c0b      	ldr	r4, [pc, #44]	; (8002764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002742:	f7fe fcaf 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002746:	f000 f811 	bl	800276c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7fe fb01 	bl	8000d50 <main>
  bx  lr    
 800274e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002750:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800275c:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 8002760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002764:	2000007c 	.word	0x2000007c

08002768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>
	...

0800276c <__libc_init_array>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	4e0d      	ldr	r6, [pc, #52]	; (80027a4 <__libc_init_array+0x38>)
 8002770:	4c0d      	ldr	r4, [pc, #52]	; (80027a8 <__libc_init_array+0x3c>)
 8002772:	1ba4      	subs	r4, r4, r6
 8002774:	10a4      	asrs	r4, r4, #2
 8002776:	2500      	movs	r5, #0
 8002778:	42a5      	cmp	r5, r4
 800277a:	d109      	bne.n	8002790 <__libc_init_array+0x24>
 800277c:	4e0b      	ldr	r6, [pc, #44]	; (80027ac <__libc_init_array+0x40>)
 800277e:	4c0c      	ldr	r4, [pc, #48]	; (80027b0 <__libc_init_array+0x44>)
 8002780:	f000 f820 	bl	80027c4 <_init>
 8002784:	1ba4      	subs	r4, r4, r6
 8002786:	10a4      	asrs	r4, r4, #2
 8002788:	2500      	movs	r5, #0
 800278a:	42a5      	cmp	r5, r4
 800278c:	d105      	bne.n	800279a <__libc_init_array+0x2e>
 800278e:	bd70      	pop	{r4, r5, r6, pc}
 8002790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002794:	4798      	blx	r3
 8002796:	3501      	adds	r5, #1
 8002798:	e7ee      	b.n	8002778 <__libc_init_array+0xc>
 800279a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800279e:	4798      	blx	r3
 80027a0:	3501      	adds	r5, #1
 80027a2:	e7f2      	b.n	800278a <__libc_init_array+0x1e>
 80027a4:	080027f4 	.word	0x080027f4
 80027a8:	080027f4 	.word	0x080027f4
 80027ac:	080027f4 	.word	0x080027f4
 80027b0:	080027f8 	.word	0x080027f8

080027b4 <memset>:
 80027b4:	4402      	add	r2, r0
 80027b6:	4603      	mov	r3, r0
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d100      	bne.n	80027be <memset+0xa>
 80027bc:	4770      	bx	lr
 80027be:	f803 1b01 	strb.w	r1, [r3], #1
 80027c2:	e7f9      	b.n	80027b8 <memset+0x4>

080027c4 <_init>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr

080027d0 <_fini>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr
